#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CDAparser
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SP")]
	public partial class EducationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertWelfareCategory(WelfareCategory instance);
    partial void UpdateWelfareCategory(WelfareCategory instance);
    partial void DeleteWelfareCategory(WelfareCategory instance);
    partial void InsertActivityCost(ActivityCost instance);
    partial void UpdateActivityCost(ActivityCost instance);
    partial void DeleteActivityCost(ActivityCost instance);
    partial void InsertAgeType(AgeType instance);
    partial void UpdateAgeType(AgeType instance);
    partial void DeleteAgeType(AgeType instance);
    partial void InsertAnnotation(Annotation instance);
    partial void UpdateAnnotation(Annotation instance);
    partial void DeleteAnnotation(Annotation instance);
    partial void InsertBloodType(BloodType instance);
    partial void UpdateBloodType(BloodType instance);
    partial void DeleteBloodType(BloodType instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCondition(Condition instance);
    partial void UpdateCondition(Condition instance);
    partial void DeleteCondition(Condition instance);
    partial void InsertConditionService(ConditionService instance);
    partial void UpdateConditionService(ConditionService instance);
    partial void DeleteConditionService(ConditionService instance);
    partial void InsertDisabilityEvaluation(DisabilityEvaluation instance);
    partial void UpdateDisabilityEvaluation(DisabilityEvaluation instance);
    partial void DeleteDisabilityEvaluation(DisabilityEvaluation instance);
    partial void InsertDisabilityEvaluation_log(DisabilityEvaluation_log instance);
    partial void UpdateDisabilityEvaluation_log(DisabilityEvaluation_log instance);
    partial void DeleteDisabilityEvaluation_log(DisabilityEvaluation_log instance);
    partial void InsertDisabilityType(DisabilityType instance);
    partial void UpdateDisabilityType(DisabilityType instance);
    partial void DeleteDisabilityType(DisabilityType instance);
    partial void Inserteducation(education instance);
    partial void Updateeducation(education instance);
    partial void Deleteeducation(education instance);
    partial void Inserteducation_log(education_log instance);
    partial void Updateeducation_log(education_log instance);
    partial void Deleteeducation_log(education_log instance);
    partial void InsertEducationChild(EducationChild instance);
    partial void UpdateEducationChild(EducationChild instance);
    partial void DeleteEducationChild(EducationChild instance);
    partial void InsertEducationLevel(EducationLevel instance);
    partial void UpdateEducationLevel(EducationLevel instance);
    partial void DeleteEducationLevel(EducationLevel instance);
    partial void InsertEducationStatus(EducationStatus instance);
    partial void UpdateEducationStatus(EducationStatus instance);
    partial void DeleteEducationStatus(EducationStatus instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertEvaluation(Evaluation instance);
    partial void UpdateEvaluation(Evaluation instance);
    partial void DeleteEvaluation(Evaluation instance);
    partial void InsertExistingWelfare(ExistingWelfare instance);
    partial void UpdateExistingWelfare(ExistingWelfare instance);
    partial void DeleteExistingWelfare(ExistingWelfare instance);
    partial void InsertFamily(Family instance);
    partial void UpdateFamily(Family instance);
    partial void DeleteFamily(Family instance);
    partial void InsertFavorItem(FavorItem instance);
    partial void UpdateFavorItem(FavorItem instance);
    partial void DeleteFavorItem(FavorItem instance);
    partial void InsertFavorList(FavorList instance);
    partial void UpdateFavorList(FavorList instance);
    partial void DeleteFavorList(FavorList instance);
    partial void InsertFavorList_log(FavorList_log instance);
    partial void UpdateFavorList_log(FavorList_log instance);
    partial void DeleteFavorList_log(FavorList_log instance);
    partial void InsertForeigner(Foreigner instance);
    partial void UpdateForeigner(Foreigner instance);
    partial void DeleteForeigner(Foreigner instance);
    partial void InsertGrowthEvaluation(GrowthEvaluation instance);
    partial void UpdateGrowthEvaluation(GrowthEvaluation instance);
    partial void DeleteGrowthEvaluation(GrowthEvaluation instance);
    partial void InsertGrowthEvaluation2(GrowthEvaluation2 instance);
    partial void UpdateGrowthEvaluation2(GrowthEvaluation2 instance);
    partial void DeleteGrowthEvaluation2(GrowthEvaluation2 instance);
    partial void InsertHealthEvaluation(HealthEvaluation instance);
    partial void UpdateHealthEvaluation(HealthEvaluation instance);
    partial void DeleteHealthEvaluation(HealthEvaluation instance);
    partial void InsertHealthEvaluation_log(HealthEvaluation_log instance);
    partial void UpdateHealthEvaluation_log(HealthEvaluation_log instance);
    partial void DeleteHealthEvaluation_log(HealthEvaluation_log instance);
    partial void Inserthealthinfo(healthinfo instance);
    partial void Updatehealthinfo(healthinfo instance);
    partial void Deletehealthinfo(healthinfo instance);
    partial void Inserthealthinfo_log(healthinfo_log instance);
    partial void Updatehealthinfo_log(healthinfo_log instance);
    partial void Deletehealthinfo_log(healthinfo_log instance);
    partial void InsertHealthProblem(HealthProblem instance);
    partial void UpdateHealthProblem(HealthProblem instance);
    partial void DeleteHealthProblem(HealthProblem instance);
    partial void InsertHearEvaluation(HearEvaluation instance);
    partial void UpdateHearEvaluation(HearEvaluation instance);
    partial void DeleteHearEvaluation(HearEvaluation instance);
    partial void InsertHearEvaluation_log(HearEvaluation_log instance);
    partial void UpdateHearEvaluation_log(HearEvaluation_log instance);
    partial void DeleteHearEvaluation_log(HearEvaluation_log instance);
    partial void InsertHearProblem(HearProblem instance);
    partial void UpdateHearProblem(HearProblem instance);
    partial void DeleteHearProblem(HearProblem instance);
    partial void InsertHL7_Gender_Standard(HL7_Gender_Standard instance);
    partial void UpdateHL7_Gender_Standard(HL7_Gender_Standard instance);
    partial void DeleteHL7_Gender_Standard(HL7_Gender_Standard instance);
    partial void InsertHost(Host instance);
    partial void UpdateHost(Host instance);
    partial void DeleteHost(Host instance);
    partial void InsertInsuranceCard(InsuranceCard instance);
    partial void UpdateInsuranceCard(InsuranceCard instance);
    partial void DeleteInsuranceCard(InsuranceCard instance);
    partial void InsertLiveHomeStatus(LiveHomeStatus instance);
    partial void UpdateLiveHomeStatus(LiveHomeStatus instance);
    partial void DeleteLiveHomeStatus(LiveHomeStatus instance);
    partial void InsertLiveStatus(LiveStatus instance);
    partial void UpdateLiveStatus(LiveStatus instance);
    partial void DeleteLiveStatus(LiveStatus instance);
    partial void InsertMariageStatus(MariageStatus instance);
    partial void UpdateMariageStatus(MariageStatus instance);
    partial void DeleteMariageStatus(MariageStatus instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertMaterial_DisableType(Material_DisableType instance);
    partial void UpdateMaterial_DisableType(Material_DisableType instance);
    partial void DeleteMaterial_DisableType(Material_DisableType instance);
    partial void InsertMaterial_skillType(Material_skillType instance);
    partial void UpdateMaterial_skillType(Material_skillType instance);
    partial void DeleteMaterial_skillType(Material_skillType instance);
    partial void InsertMinistry(Ministry instance);
    partial void UpdateMinistry(Ministry instance);
    partial void DeleteMinistry(Ministry instance);
    partial void InsertOccupation(Occupation instance);
    partial void UpdateOccupation(Occupation instance);
    partial void DeleteOccupation(Occupation instance);
    partial void InsertOrganization(Organization instance);
    partial void UpdateOrganization(Organization instance);
    partial void DeleteOrganization(Organization instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPhysicalEvaluation(PhysicalEvaluation instance);
    partial void UpdatePhysicalEvaluation(PhysicalEvaluation instance);
    partial void DeletePhysicalEvaluation(PhysicalEvaluation instance);
    partial void InsertPhysicalEvaluation_log(PhysicalEvaluation_log instance);
    partial void UpdatePhysicalEvaluation_log(PhysicalEvaluation_log instance);
    partial void DeletePhysicalEvaluation_log(PhysicalEvaluation_log instance);
    partial void InsertPhysicalProblem(PhysicalProblem instance);
    partial void UpdatePhysicalProblem(PhysicalProblem instance);
    partial void DeletePhysicalProblem(PhysicalProblem instance);
    partial void InsertPlannig(Plannig instance);
    partial void UpdatePlannig(Plannig instance);
    partial void DeletePlannig(Plannig instance);
    partial void InsertProvider(Provider instance);
    partial void UpdateProvider(Provider instance);
    partial void DeleteProvider(Provider instance);
    partial void InsertProvince(Province instance);
    partial void UpdateProvince(Province instance);
    partial void DeleteProvince(Province instance);
    partial void Insertr_LiveStatus(r_LiveStatus instance);
    partial void Updater_LiveStatus(r_LiveStatus instance);
    partial void Deleter_LiveStatus(r_LiveStatus instance);
    partial void Insertr_MariageStatus(r_MariageStatus instance);
    partial void Updater_MariageStatus(r_MariageStatus instance);
    partial void Deleter_MariageStatus(r_MariageStatus instance);
    partial void Insertr_yesno(r_yesno instance);
    partial void Updater_yesno(r_yesno instance);
    partial void Deleter_yesno(r_yesno instance);
    partial void Insertreg_heal(reg_heal instance);
    partial void Updatereg_heal(reg_heal instance);
    partial void Deletereg_heal(reg_heal instance);
    partial void InsertRelation(Relation instance);
    partial void UpdateRelation(Relation instance);
    partial void DeleteRelation(Relation instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertRole_Staff(Role_Staff instance);
    partial void UpdateRole_Staff(Role_Staff instance);
    partial void DeleteRole_Staff(Role_Staff instance);
    partial void InsertSelfCareAbility(SelfCareAbility instance);
    partial void UpdateSelfCareAbility(SelfCareAbility instance);
    partial void DeleteSelfCareAbility(SelfCareAbility instance);
    partial void InsertSelfCareEvaluation(SelfCareEvaluation instance);
    partial void UpdateSelfCareEvaluation(SelfCareEvaluation instance);
    partial void DeleteSelfCareEvaluation(SelfCareEvaluation instance);
    partial void InsertSelfCareEvaluation_log(SelfCareEvaluation_log instance);
    partial void UpdateSelfCareEvaluation_log(SelfCareEvaluation_log instance);
    partial void DeleteSelfCareEvaluation_log(SelfCareEvaluation_log instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceProvision(ServiceProvision instance);
    partial void UpdateServiceProvision(ServiceProvision instance);
    partial void DeleteServiceProvision(ServiceProvision instance);
    partial void InsertServiceProvisionDetail(ServiceProvisionDetail instance);
    partial void UpdateServiceProvisionDetail(ServiceProvisionDetail instance);
    partial void DeleteServiceProvisionDetail(ServiceProvisionDetail instance);
    partial void InsertServiceProvisionDetails_log(ServiceProvisionDetails_log instance);
    partial void UpdateServiceProvisionDetails_log(ServiceProvisionDetails_log instance);
    partial void DeleteServiceProvisionDetails_log(ServiceProvisionDetails_log instance);
    partial void InsertServiceProvisionVsPerson(ServiceProvisionVsPerson instance);
    partial void UpdateServiceProvisionVsPerson(ServiceProvisionVsPerson instance);
    partial void DeleteServiceProvisionVsPerson(ServiceProvisionVsPerson instance);
    partial void InsertSightEvaluation(SightEvaluation instance);
    partial void UpdateSightEvaluation(SightEvaluation instance);
    partial void DeleteSightEvaluation(SightEvaluation instance);
    partial void InsertSightEvaluation_log(SightEvaluation_log instance);
    partial void UpdateSightEvaluation_log(SightEvaluation_log instance);
    partial void DeleteSightEvaluation_log(SightEvaluation_log instance);
    partial void InsertSightProblem(SightProblem instance);
    partial void UpdateSightProblem(SightProblem instance);
    partial void DeleteSightProblem(SightProblem instance);
    partial void InsertSubActivity(SubActivity instance);
    partial void UpdateSubActivity(SubActivity instance);
    partial void DeleteSubActivity(SubActivity instance);
    partial void InsertSubActivity2(SubActivity2 instance);
    partial void UpdateSubActivity2(SubActivity2 instance);
    partial void DeleteSubActivity2(SubActivity2 instance);
    partial void InsertSubWelfare(SubWelfare instance);
    partial void UpdateSubWelfare(SubWelfare instance);
    partial void DeleteSubWelfare(SubWelfare instance);
    partial void InsertTitle(Title instance);
    partial void UpdateTitle(Title instance);
    partial void DeleteTitle(Title instance);
    partial void InsertTool(Tool instance);
    partial void UpdateTool(Tool instance);
    partial void DeleteTool(Tool instance);
    partial void InsertTools_log(Tools_log instance);
    partial void UpdateTools_log(Tools_log instance);
    partial void DeleteTools_log(Tools_log instance);
    partial void InsertTumbon(Tumbon instance);
    partial void UpdateTumbon(Tumbon instance);
    partial void DeleteTumbon(Tumbon instance);
    partial void InsertUsedMaterial(UsedMaterial instance);
    partial void UpdateUsedMaterial(UsedMaterial instance);
    partial void DeleteUsedMaterial(UsedMaterial instance);
    partial void InsertUsedMaterials_log(UsedMaterials_log instance);
    partial void UpdateUsedMaterials_log(UsedMaterials_log instance);
    partial void DeleteUsedMaterials_log(UsedMaterials_log instance);
    #endregion
		
		public EducationDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SPConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EducationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EducationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EducationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EducationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<WelfareCategory> WelfareCategories
		{
			get
			{
				return this.GetTable<WelfareCategory>();
			}
		}
		
		public System.Data.Linq.Table<ActivityCost> ActivityCosts
		{
			get
			{
				return this.GetTable<ActivityCost>();
			}
		}
		
		public System.Data.Linq.Table<AgeType> AgeTypes
		{
			get
			{
				return this.GetTable<AgeType>();
			}
		}
		
		public System.Data.Linq.Table<Annotation> Annotations
		{
			get
			{
				return this.GetTable<Annotation>();
			}
		}
		
		public System.Data.Linq.Table<BloodType> BloodTypes
		{
			get
			{
				return this.GetTable<BloodType>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Condition> Conditions
		{
			get
			{
				return this.GetTable<Condition>();
			}
		}
		
		public System.Data.Linq.Table<ConditionActivity> ConditionActivities
		{
			get
			{
				return this.GetTable<ConditionActivity>();
			}
		}
		
		public System.Data.Linq.Table<ConditionService> ConditionServices
		{
			get
			{
				return this.GetTable<ConditionService>();
			}
		}
		
		public System.Data.Linq.Table<DisabilityEvaluation> DisabilityEvaluations
		{
			get
			{
				return this.GetTable<DisabilityEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<DisabilityEvaluation_log> DisabilityEvaluation_logs
		{
			get
			{
				return this.GetTable<DisabilityEvaluation_log>();
			}
		}
		
		public System.Data.Linq.Table<DisabilityType> DisabilityTypes
		{
			get
			{
				return this.GetTable<DisabilityType>();
			}
		}
		
		public System.Data.Linq.Table<education> educations
		{
			get
			{
				return this.GetTable<education>();
			}
		}
		
		public System.Data.Linq.Table<education_log> education_logs
		{
			get
			{
				return this.GetTable<education_log>();
			}
		}
		
		public System.Data.Linq.Table<EducationChild> EducationChilds
		{
			get
			{
				return this.GetTable<EducationChild>();
			}
		}
		
		public System.Data.Linq.Table<EducationLevel> EducationLevels
		{
			get
			{
				return this.GetTable<EducationLevel>();
			}
		}
		
		public System.Data.Linq.Table<EducationStatus> EducationStatus
		{
			get
			{
				return this.GetTable<EducationStatus>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<Evaluation> Evaluations
		{
			get
			{
				return this.GetTable<Evaluation>();
			}
		}
		
		public System.Data.Linq.Table<ExistingWelfare> ExistingWelfares
		{
			get
			{
				return this.GetTable<ExistingWelfare>();
			}
		}
		
		public System.Data.Linq.Table<Family> Families
		{
			get
			{
				return this.GetTable<Family>();
			}
		}
		
		public System.Data.Linq.Table<FavorItem> FavorItems
		{
			get
			{
				return this.GetTable<FavorItem>();
			}
		}
		
		public System.Data.Linq.Table<FavorList> FavorLists
		{
			get
			{
				return this.GetTable<FavorList>();
			}
		}
		
		public System.Data.Linq.Table<FavorList_log> FavorList_logs
		{
			get
			{
				return this.GetTable<FavorList_log>();
			}
		}
		
		public System.Data.Linq.Table<Foreigner> Foreigners
		{
			get
			{
				return this.GetTable<Foreigner>();
			}
		}
		
		public System.Data.Linq.Table<GrowthEvaluation> GrowthEvaluations
		{
			get
			{
				return this.GetTable<GrowthEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<GrowthEvaluation2> GrowthEvaluation2s
		{
			get
			{
				return this.GetTable<GrowthEvaluation2>();
			}
		}
		
		public System.Data.Linq.Table<HealthEvaluation> HealthEvaluations
		{
			get
			{
				return this.GetTable<HealthEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<HealthEvaluation_log> HealthEvaluation_logs
		{
			get
			{
				return this.GetTable<HealthEvaluation_log>();
			}
		}
		
		public System.Data.Linq.Table<healthinfo> healthinfos
		{
			get
			{
				return this.GetTable<healthinfo>();
			}
		}
		
		public System.Data.Linq.Table<healthinfo_log> healthinfo_logs
		{
			get
			{
				return this.GetTable<healthinfo_log>();
			}
		}
		
		public System.Data.Linq.Table<HealthProblem> HealthProblems
		{
			get
			{
				return this.GetTable<HealthProblem>();
			}
		}
		
		public System.Data.Linq.Table<HearEvaluation> HearEvaluations
		{
			get
			{
				return this.GetTable<HearEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<HearEvaluation_log> HearEvaluation_logs
		{
			get
			{
				return this.GetTable<HearEvaluation_log>();
			}
		}
		
		public System.Data.Linq.Table<HearProblem> HearProblems
		{
			get
			{
				return this.GetTable<HearProblem>();
			}
		}
		
		public System.Data.Linq.Table<HL7_Gender_Standard> HL7_Gender_Standards
		{
			get
			{
				return this.GetTable<HL7_Gender_Standard>();
			}
		}
		
		public System.Data.Linq.Table<Host> Hosts
		{
			get
			{
				return this.GetTable<Host>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceCard> InsuranceCards
		{
			get
			{
				return this.GetTable<InsuranceCard>();
			}
		}
		
		public System.Data.Linq.Table<LiveHomeStatus> LiveHomeStatus
		{
			get
			{
				return this.GetTable<LiveHomeStatus>();
			}
		}
		
		public System.Data.Linq.Table<LiveStatus> LiveStatus
		{
			get
			{
				return this.GetTable<LiveStatus>();
			}
		}
		
		public System.Data.Linq.Table<MariageStatus> MariageStatus
		{
			get
			{
				return this.GetTable<MariageStatus>();
			}
		}
		
		public System.Data.Linq.Table<Material> Materials
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Material_DisableType> Material_DisableTypes
		{
			get
			{
				return this.GetTable<Material_DisableType>();
			}
		}
		
		public System.Data.Linq.Table<Material_skillType> Material_skillTypes
		{
			get
			{
				return this.GetTable<Material_skillType>();
			}
		}
		
		public System.Data.Linq.Table<Ministry> Ministries
		{
			get
			{
				return this.GetTable<Ministry>();
			}
		}
		
		public System.Data.Linq.Table<Occupation> Occupations
		{
			get
			{
				return this.GetTable<Occupation>();
			}
		}
		
		public System.Data.Linq.Table<Organization> Organizations
		{
			get
			{
				return this.GetTable<Organization>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalEvaluation> PhysicalEvaluations
		{
			get
			{
				return this.GetTable<PhysicalEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalEvaluation_log> PhysicalEvaluation_logs
		{
			get
			{
				return this.GetTable<PhysicalEvaluation_log>();
			}
		}
		
		public System.Data.Linq.Table<PhysicalProblem> PhysicalProblems
		{
			get
			{
				return this.GetTable<PhysicalProblem>();
			}
		}
		
		public System.Data.Linq.Table<Plannig> Plannigs
		{
			get
			{
				return this.GetTable<Plannig>();
			}
		}
		
		public System.Data.Linq.Table<Provider> Providers
		{
			get
			{
				return this.GetTable<Provider>();
			}
		}
		
		public System.Data.Linq.Table<Province> Provinces
		{
			get
			{
				return this.GetTable<Province>();
			}
		}
		
		public System.Data.Linq.Table<r_LiveStatus> r_LiveStatus
		{
			get
			{
				return this.GetTable<r_LiveStatus>();
			}
		}
		
		public System.Data.Linq.Table<r_MariageStatus> r_MariageStatus
		{
			get
			{
				return this.GetTable<r_MariageStatus>();
			}
		}
		
		public System.Data.Linq.Table<r_yesno> r_yesnos
		{
			get
			{
				return this.GetTable<r_yesno>();
			}
		}
		
		public System.Data.Linq.Table<reg_heal> reg_heals
		{
			get
			{
				return this.GetTable<reg_heal>();
			}
		}
		
		public System.Data.Linq.Table<Relation> Relations
		{
			get
			{
				return this.GetTable<Relation>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Role_Staff> Role_Staffs
		{
			get
			{
				return this.GetTable<Role_Staff>();
			}
		}
		
		public System.Data.Linq.Table<SelfCareAbility> SelfCareAbilities
		{
			get
			{
				return this.GetTable<SelfCareAbility>();
			}
		}
		
		public System.Data.Linq.Table<SelfCareEvaluation> SelfCareEvaluations
		{
			get
			{
				return this.GetTable<SelfCareEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<SelfCareEvaluation_log> SelfCareEvaluation_logs
		{
			get
			{
				return this.GetTable<SelfCareEvaluation_log>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProvision> ServiceProvisions
		{
			get
			{
				return this.GetTable<ServiceProvision>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProvisionDetail> ServiceProvisionDetails
		{
			get
			{
				return this.GetTable<ServiceProvisionDetail>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProvisionDetails_log> ServiceProvisionDetails_logs
		{
			get
			{
				return this.GetTable<ServiceProvisionDetails_log>();
			}
		}
		
		public System.Data.Linq.Table<ServiceProvisionVsPerson> ServiceProvisionVsPersons
		{
			get
			{
				return this.GetTable<ServiceProvisionVsPerson>();
			}
		}
		
		public System.Data.Linq.Table<SightEvaluation> SightEvaluations
		{
			get
			{
				return this.GetTable<SightEvaluation>();
			}
		}
		
		public System.Data.Linq.Table<SightEvaluation_log> SightEvaluation_logs
		{
			get
			{
				return this.GetTable<SightEvaluation_log>();
			}
		}
		
		public System.Data.Linq.Table<SightProblem> SightProblems
		{
			get
			{
				return this.GetTable<SightProblem>();
			}
		}
		
		public System.Data.Linq.Table<SubActivity> SubActivities
		{
			get
			{
				return this.GetTable<SubActivity>();
			}
		}
		
		public System.Data.Linq.Table<SubActivity2> SubActivity2s
		{
			get
			{
				return this.GetTable<SubActivity2>();
			}
		}
		
		public System.Data.Linq.Table<SubWelfare> SubWelfares
		{
			get
			{
				return this.GetTable<SubWelfare>();
			}
		}
		
		public System.Data.Linq.Table<Title> Titles
		{
			get
			{
				return this.GetTable<Title>();
			}
		}
		
		public System.Data.Linq.Table<Tool> Tools
		{
			get
			{
				return this.GetTable<Tool>();
			}
		}
		
		public System.Data.Linq.Table<Tools_log> Tools_logs
		{
			get
			{
				return this.GetTable<Tools_log>();
			}
		}
		
		public System.Data.Linq.Table<Tumbon> Tumbons
		{
			get
			{
				return this.GetTable<Tumbon>();
			}
		}
		
		public System.Data.Linq.Table<UsedMaterial> UsedMaterials
		{
			get
			{
				return this.GetTable<UsedMaterial>();
			}
		}
		
		public System.Data.Linq.Table<UsedMaterials_log> UsedMaterials_logs
		{
			get
			{
				return this.GetTable<UsedMaterials_log>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACTCode;
		
		private string _ACTDesc;
		
		private string _SVCCode;
		
		private EntitySet<Plannig> _Plannigs;
		
		private EntitySet<SubActivity> _SubActivities;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnACTDescChanging(string value);
    partial void OnACTDescChanged();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    #endregion
		
		public Activity()
		{
			this._Plannigs = new EntitySet<Plannig>(new Action<Plannig>(this.attach_Plannigs), new Action<Plannig>(this.detach_Plannigs));
			this._SubActivities = new EntitySet<SubActivity>(new Action<SubActivity>(this.attach_SubActivities), new Action<SubActivity>(this.detach_SubActivities));
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTDesc", DbType="VarChar(MAX)")]
		public string ACTDesc
		{
			get
			{
				return this._ACTDesc;
			}
			set
			{
				if ((this._ACTDesc != value))
				{
					this.OnACTDescChanging(value);
					this.SendPropertyChanging();
					this._ACTDesc = value;
					this.SendPropertyChanged("ACTDesc");
					this.OnACTDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="VarChar(255)")]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Plannig", Storage="_Plannigs", ThisKey="ACTCode", OtherKey="SACTCode")]
		public EntitySet<Plannig> Plannigs
		{
			get
			{
				return this._Plannigs;
			}
			set
			{
				this._Plannigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_SubActivity", Storage="_SubActivities", ThisKey="ACTCode", OtherKey="ACTCode")]
		public EntitySet<SubActivity> SubActivities
		{
			get
			{
				return this._SubActivities;
			}
			set
			{
				this._SubActivities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Activity", Storage="_Service", ThisKey="SVCCode", OtherKey="SVCCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._SVCCode = value.SVCCode;
					}
					else
					{
						this._SVCCode = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Plannigs(Plannig entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_Plannigs(Plannig entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_SubActivities(SubActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_SubActivities(SubActivity entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WelfareCategory")]
	public partial class WelfareCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _WelfareID;
		
		private string _WelfareDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWelfareIDChanging(string value);
    partial void OnWelfareIDChanged();
    partial void OnWelfareDescriptionChanging(string value);
    partial void OnWelfareDescriptionChanged();
    #endregion
		
		public WelfareCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelfareID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string WelfareID
		{
			get
			{
				return this._WelfareID;
			}
			set
			{
				if ((this._WelfareID != value))
				{
					this.OnWelfareIDChanging(value);
					this.SendPropertyChanging();
					this._WelfareID = value;
					this.SendPropertyChanged("WelfareID");
					this.OnWelfareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelfareDescription", DbType="VarChar(MAX)")]
		public string WelfareDescription
		{
			get
			{
				return this._WelfareDescription;
			}
			set
			{
				if ((this._WelfareDescription != value))
				{
					this.OnWelfareDescriptionChanging(value);
					this.SendPropertyChanging();
					this._WelfareDescription = value;
					this.SendPropertyChanged("WelfareDescription");
					this.OnWelfareDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityCost")]
	public partial class ActivityCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACTCode;
		
		private string _Unit;
		
		private string _LabourCost;
		
		private string _MaterialCost;
		
		private string _CC_Equipment;
		
		private string _CC_Building;
		
		private string _IndirectCost;
		
		private string _ProposedCost;
		
		private string _CurrentCost;
		
		private string _UnitCost;
		
		private string _ReferencedCostOrg;
		
		private System.Nullable<System.DateTime> _TimsStamp;
		
		private string _AID;
		
		private EntityRef<Annotation> _Annotation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnUnitChanging(string value);
    partial void OnUnitChanged();
    partial void OnLabourCostChanging(string value);
    partial void OnLabourCostChanged();
    partial void OnMaterialCostChanging(string value);
    partial void OnMaterialCostChanged();
    partial void OnCC_EquipmentChanging(string value);
    partial void OnCC_EquipmentChanged();
    partial void OnCC_BuildingChanging(string value);
    partial void OnCC_BuildingChanged();
    partial void OnIndirectCostChanging(string value);
    partial void OnIndirectCostChanged();
    partial void OnProposedCostChanging(string value);
    partial void OnProposedCostChanged();
    partial void OnCurrentCostChanging(string value);
    partial void OnCurrentCostChanged();
    partial void OnUnitCostChanging(string value);
    partial void OnUnitCostChanged();
    partial void OnReferencedCostOrgChanging(string value);
    partial void OnReferencedCostOrgChanged();
    partial void OnTimsStampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimsStampChanged();
    partial void OnAIDChanging(string value);
    partial void OnAIDChanged();
    #endregion
		
		public ActivityCost()
		{
			this._Annotation = default(EntityRef<Annotation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Char(255)")]
		public string Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabourCost", DbType="Char(255)")]
		public string LabourCost
		{
			get
			{
				return this._LabourCost;
			}
			set
			{
				if ((this._LabourCost != value))
				{
					this.OnLabourCostChanging(value);
					this.SendPropertyChanging();
					this._LabourCost = value;
					this.SendPropertyChanged("LabourCost");
					this.OnLabourCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCost", DbType="Char(255)")]
		public string MaterialCost
		{
			get
			{
				return this._MaterialCost;
			}
			set
			{
				if ((this._MaterialCost != value))
				{
					this.OnMaterialCostChanging(value);
					this.SendPropertyChanging();
					this._MaterialCost = value;
					this.SendPropertyChanged("MaterialCost");
					this.OnMaterialCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC_Equipment", DbType="Char(255)")]
		public string CC_Equipment
		{
			get
			{
				return this._CC_Equipment;
			}
			set
			{
				if ((this._CC_Equipment != value))
				{
					this.OnCC_EquipmentChanging(value);
					this.SendPropertyChanging();
					this._CC_Equipment = value;
					this.SendPropertyChanged("CC_Equipment");
					this.OnCC_EquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CC_Building", DbType="Char(255)")]
		public string CC_Building
		{
			get
			{
				return this._CC_Building;
			}
			set
			{
				if ((this._CC_Building != value))
				{
					this.OnCC_BuildingChanging(value);
					this.SendPropertyChanging();
					this._CC_Building = value;
					this.SendPropertyChanged("CC_Building");
					this.OnCC_BuildingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndirectCost", DbType="Char(255)")]
		public string IndirectCost
		{
			get
			{
				return this._IndirectCost;
			}
			set
			{
				if ((this._IndirectCost != value))
				{
					this.OnIndirectCostChanging(value);
					this.SendPropertyChanging();
					this._IndirectCost = value;
					this.SendPropertyChanged("IndirectCost");
					this.OnIndirectCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProposedCost", DbType="Char(255)")]
		public string ProposedCost
		{
			get
			{
				return this._ProposedCost;
			}
			set
			{
				if ((this._ProposedCost != value))
				{
					this.OnProposedCostChanging(value);
					this.SendPropertyChanging();
					this._ProposedCost = value;
					this.SendPropertyChanged("ProposedCost");
					this.OnProposedCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentCost", DbType="Char(255)")]
		public string CurrentCost
		{
			get
			{
				return this._CurrentCost;
			}
			set
			{
				if ((this._CurrentCost != value))
				{
					this.OnCurrentCostChanging(value);
					this.SendPropertyChanging();
					this._CurrentCost = value;
					this.SendPropertyChanged("CurrentCost");
					this.OnCurrentCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitCost", DbType="Char(255)")]
		public string UnitCost
		{
			get
			{
				return this._UnitCost;
			}
			set
			{
				if ((this._UnitCost != value))
				{
					this.OnUnitCostChanging(value);
					this.SendPropertyChanging();
					this._UnitCost = value;
					this.SendPropertyChanged("UnitCost");
					this.OnUnitCostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferencedCostOrg", DbType="Char(255)")]
		public string ReferencedCostOrg
		{
			get
			{
				return this._ReferencedCostOrg;
			}
			set
			{
				if ((this._ReferencedCostOrg != value))
				{
					this.OnReferencedCostOrgChanging(value);
					this.SendPropertyChanging();
					this._ReferencedCostOrg = value;
					this.SendPropertyChanged("ReferencedCostOrg");
					this.OnReferencedCostOrgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimsStamp", DbType="Date")]
		public System.Nullable<System.DateTime> TimsStamp
		{
			get
			{
				return this._TimsStamp;
			}
			set
			{
				if ((this._TimsStamp != value))
				{
					this.OnTimsStampChanging(value);
					this.SendPropertyChanging();
					this._TimsStamp = value;
					this.SendPropertyChanged("TimsStamp");
					this.OnTimsStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AID", DbType="Char(255)")]
		public string AID
		{
			get
			{
				return this._AID;
			}
			set
			{
				if ((this._AID != value))
				{
					if (this._Annotation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAIDChanging(value);
					this.SendPropertyChanging();
					this._AID = value;
					this.SendPropertyChanged("AID");
					this.OnAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Annotation_ActivityCost", Storage="_Annotation", ThisKey="AID", OtherKey="AID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Annotation Annotation
		{
			get
			{
				return this._Annotation.Entity;
			}
			set
			{
				Annotation previousValue = this._Annotation.Entity;
				if (((previousValue != value) 
							|| (this._Annotation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Annotation.Entity = null;
						previousValue.ActivityCosts.Remove(this);
					}
					this._Annotation.Entity = value;
					if ((value != null))
					{
						value.ActivityCosts.Add(this);
						this._AID = value.AID;
					}
					else
					{
						this._AID = default(string);
					}
					this.SendPropertyChanged("Annotation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgeType")]
	public partial class AgeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AgeCode;
		
		private string _AgeRange;
		
		private string _MinAgeRange;
		
		private string _MaxAgeRange;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgeCodeChanging(string value);
    partial void OnAgeCodeChanged();
    partial void OnAgeRangeChanging(string value);
    partial void OnAgeRangeChanged();
    partial void OnMinAgeRangeChanging(string value);
    partial void OnMinAgeRangeChanged();
    partial void OnMaxAgeRangeChanging(string value);
    partial void OnMaxAgeRangeChanged();
    #endregion
		
		public AgeType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AgeCode
		{
			get
			{
				return this._AgeCode;
			}
			set
			{
				if ((this._AgeCode != value))
				{
					this.OnAgeCodeChanging(value);
					this.SendPropertyChanging();
					this._AgeCode = value;
					this.SendPropertyChanged("AgeCode");
					this.OnAgeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeRange", DbType="VarChar(50)")]
		public string AgeRange
		{
			get
			{
				return this._AgeRange;
			}
			set
			{
				if ((this._AgeRange != value))
				{
					this.OnAgeRangeChanging(value);
					this.SendPropertyChanging();
					this._AgeRange = value;
					this.SendPropertyChanged("AgeRange");
					this.OnAgeRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinAgeRange", DbType="VarChar(50)")]
		public string MinAgeRange
		{
			get
			{
				return this._MinAgeRange;
			}
			set
			{
				if ((this._MinAgeRange != value))
				{
					this.OnMinAgeRangeChanging(value);
					this.SendPropertyChanging();
					this._MinAgeRange = value;
					this.SendPropertyChanged("MinAgeRange");
					this.OnMinAgeRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxAgeRange", DbType="VarChar(50)")]
		public string MaxAgeRange
		{
			get
			{
				return this._MaxAgeRange;
			}
			set
			{
				if ((this._MaxAgeRange != value))
				{
					this.OnMaxAgeRangeChanging(value);
					this.SendPropertyChanging();
					this._MaxAgeRange = value;
					this.SendPropertyChanged("MaxAgeRange");
					this.OnMaxAgeRangeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Annotation")]
	public partial class Annotation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AID;
		
		private string _AText;
		
		private string _AnnotationID;
		
		private string _Reference;
		
		private EntitySet<ActivityCost> _ActivityCosts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAIDChanging(string value);
    partial void OnAIDChanged();
    partial void OnATextChanging(string value);
    partial void OnATextChanged();
    partial void OnAnnotationIDChanging(string value);
    partial void OnAnnotationIDChanged();
    partial void OnReferenceChanging(string value);
    partial void OnReferenceChanged();
    #endregion
		
		public Annotation()
		{
			this._ActivityCosts = new EntitySet<ActivityCost>(new Action<ActivityCost>(this.attach_ActivityCosts), new Action<ActivityCost>(this.detach_ActivityCosts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AID", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AID
		{
			get
			{
				return this._AID;
			}
			set
			{
				if ((this._AID != value))
				{
					this.OnAIDChanging(value);
					this.SendPropertyChanging();
					this._AID = value;
					this.SendPropertyChanged("AID");
					this.OnAIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AText", DbType="Char(255)")]
		public string AText
		{
			get
			{
				return this._AText;
			}
			set
			{
				if ((this._AText != value))
				{
					this.OnATextChanging(value);
					this.SendPropertyChanging();
					this._AText = value;
					this.SendPropertyChanged("AText");
					this.OnATextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnotationID", DbType="Char(255)")]
		public string AnnotationID
		{
			get
			{
				return this._AnnotationID;
			}
			set
			{
				if ((this._AnnotationID != value))
				{
					this.OnAnnotationIDChanging(value);
					this.SendPropertyChanging();
					this._AnnotationID = value;
					this.SendPropertyChanged("AnnotationID");
					this.OnAnnotationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Reference", DbType="Char(255)")]
		public string Reference
		{
			get
			{
				return this._Reference;
			}
			set
			{
				if ((this._Reference != value))
				{
					this.OnReferenceChanging(value);
					this.SendPropertyChanging();
					this._Reference = value;
					this.SendPropertyChanged("Reference");
					this.OnReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Annotation_ActivityCost", Storage="_ActivityCosts", ThisKey="AID", OtherKey="AID")]
		public EntitySet<ActivityCost> ActivityCosts
		{
			get
			{
				return this._ActivityCosts;
			}
			set
			{
				this._ActivityCosts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityCosts(ActivityCost entity)
		{
			this.SendPropertyChanging();
			entity.Annotation = this;
		}
		
		private void detach_ActivityCosts(ActivityCost entity)
		{
			this.SendPropertyChanging();
			entity.Annotation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BloodType")]
	public partial class BloodType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BloodTypeID;
		
		private string _BloodTypeDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBloodTypeIDChanging(string value);
    partial void OnBloodTypeIDChanged();
    partial void OnBloodTypeDescriptionChanging(string value);
    partial void OnBloodTypeDescriptionChanged();
    #endregion
		
		public BloodType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodTypeID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BloodTypeID
		{
			get
			{
				return this._BloodTypeID;
			}
			set
			{
				if ((this._BloodTypeID != value))
				{
					this.OnBloodTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BloodTypeID = value;
					this.SendPropertyChanged("BloodTypeID");
					this.OnBloodTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodTypeDescription", DbType="VarChar(MAX)")]
		public string BloodTypeDescription
		{
			get
			{
				return this._BloodTypeDescription;
			}
			set
			{
				if ((this._BloodTypeDescription != value))
				{
					this.OnBloodTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._BloodTypeDescription = value;
					this.SendPropertyChanged("BloodTypeDescription");
					this.OnBloodTypeDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CityID;
		
		private string _CityDescription;
		
		private string _ProvinceID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCityIDChanging(string value);
    partial void OnCityIDChanged();
    partial void OnCityDescriptionChanging(string value);
    partial void OnCityDescriptionChanged();
    partial void OnProvinceIDChanging(string value);
    partial void OnProvinceIDChanged();
    #endregion
		
		public City()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityDescription", DbType="VarChar(MAX)")]
		public string CityDescription
		{
			get
			{
				return this._CityDescription;
			}
			set
			{
				if ((this._CityDescription != value))
				{
					this.OnCityDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CityDescription = value;
					this.SendPropertyChanged("CityDescription");
					this.OnCityDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="VarChar(10)")]
		public string ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Condition")]
	public partial class Condition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConditionCode;
		
		private string _ConditionDesc;
		
		private string _Condition1;
		
		private EntityRef<ConditionService> _ConditionService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionCodeChanging(string value);
    partial void OnConditionCodeChanged();
    partial void OnConditionDescChanging(string value);
    partial void OnConditionDescChanged();
    partial void OnCondition1Changing(string value);
    partial void OnCondition1Changed();
    #endregion
		
		public Condition()
		{
			this._ConditionService = default(EntityRef<ConditionService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionCode
		{
			get
			{
				return this._ConditionCode;
			}
			set
			{
				if ((this._ConditionCode != value))
				{
					this.OnConditionCodeChanging(value);
					this.SendPropertyChanging();
					this._ConditionCode = value;
					this.SendPropertyChanged("ConditionCode");
					this.OnConditionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionDesc", DbType="Char(255)")]
		public string ConditionDesc
		{
			get
			{
				return this._ConditionDesc;
			}
			set
			{
				if ((this._ConditionDesc != value))
				{
					this.OnConditionDescChanging(value);
					this.SendPropertyChanging();
					this._ConditionDesc = value;
					this.SendPropertyChanged("ConditionDesc");
					this.OnConditionDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Condition", Storage="_Condition1", DbType="Char(255)")]
		public string Condition1
		{
			get
			{
				return this._Condition1;
			}
			set
			{
				if ((this._Condition1 != value))
				{
					this.OnCondition1Changing(value);
					this.SendPropertyChanging();
					this._Condition1 = value;
					this.SendPropertyChanged("Condition1");
					this.OnCondition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionService", Storage="_ConditionService", ThisKey="ConditionCode", OtherKey="ConditionCode", IsUnique=true, IsForeignKey=false)]
		public ConditionService ConditionService
		{
			get
			{
				return this._ConditionService.Entity;
			}
			set
			{
				ConditionService previousValue = this._ConditionService.Entity;
				if (((previousValue != value) 
							|| (this._ConditionService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ConditionService.Entity = null;
						previousValue.Condition = null;
					}
					this._ConditionService.Entity = value;
					if ((value != null))
					{
						value.Condition = this;
					}
					this.SendPropertyChanged("ConditionService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConditionActivity")]
	public partial class ConditionActivity
	{
		
		private string _ConditionCode;
		
		private string _ACTCode;
		
		public ConditionActivity()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCode", DbType="Char(255)")]
		public string ConditionCode
		{
			get
			{
				return this._ConditionCode;
			}
			set
			{
				if ((this._ConditionCode != value))
				{
					this._ConditionCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(255)")]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this._ACTCode = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConditionService")]
	public partial class ConditionService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ConditionCode;
		
		private string _SVCCODE;
		
		private EntityRef<Condition> _Condition;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnConditionCodeChanging(string value);
    partial void OnConditionCodeChanged();
    partial void OnSVCCODEChanging(string value);
    partial void OnSVCCODEChanged();
    #endregion
		
		public ConditionService()
		{
			this._Condition = default(EntityRef<Condition>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionCode", DbType="Char(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ConditionCode
		{
			get
			{
				return this._ConditionCode;
			}
			set
			{
				if ((this._ConditionCode != value))
				{
					if (this._Condition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConditionCodeChanging(value);
					this.SendPropertyChanging();
					this._ConditionCode = value;
					this.SendPropertyChanged("ConditionCode");
					this.OnConditionCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCODE", DbType="VarChar(255)")]
		public string SVCCODE
		{
			get
			{
				return this._SVCCODE;
			}
			set
			{
				if ((this._SVCCODE != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSVCCODEChanging(value);
					this.SendPropertyChanging();
					this._SVCCODE = value;
					this.SendPropertyChanged("SVCCODE");
					this.OnSVCCODEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Condition_ConditionService", Storage="_Condition", ThisKey="ConditionCode", OtherKey="ConditionCode", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Condition Condition
		{
			get
			{
				return this._Condition.Entity;
			}
			set
			{
				Condition previousValue = this._Condition.Entity;
				if (((previousValue != value) 
							|| (this._Condition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Condition.Entity = null;
						previousValue.ConditionService = null;
					}
					this._Condition.Entity = value;
					if ((value != null))
					{
						value.ConditionService = this;
						this._ConditionCode = value.ConditionCode;
					}
					else
					{
						this._ConditionCode = default(string);
					}
					this.SendPropertyChanged("Condition");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ConditionService", Storage="_Service", ThisKey="SVCCODE", OtherKey="SVCCode", IsForeignKey=true, DeleteRule="CASCADE")]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ConditionServices.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ConditionServices.Add(this);
						this._SVCCODE = value.SVCCode;
					}
					else
					{
						this._SVCCODE = default(string);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisabilityEvaluation")]
	public partial class DisabilityEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _DisabilityCode;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnDisabilityCodeChanging(string value);
    partial void OnDisabilityCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public DisabilityEvaluation()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DisabilityCode
		{
			get
			{
				return this._DisabilityCode;
			}
			set
			{
				if ((this._DisabilityCode != value))
				{
					this.OnDisabilityCodeChanging(value);
					this.SendPropertyChanging();
					this._DisabilityCode = value;
					this.SendPropertyChanged("DisabilityCode");
					this.OnDisabilityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_DisabilityEvaluation", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.DisabilityEvaluations.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.DisabilityEvaluations.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisabilityEvaluation_log")]
	public partial class DisabilityEvaluation_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _DisabilityCode;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnDisabilityCodeChanging(string value);
    partial void OnDisabilityCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public DisabilityEvaluation_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DisabilityCode
		{
			get
			{
				return this._DisabilityCode;
			}
			set
			{
				if ((this._DisabilityCode != value))
				{
					this.OnDisabilityCodeChanging(value);
					this.SendPropertyChanging();
					this._DisabilityCode = value;
					this.SendPropertyChanged("DisabilityCode");
					this.OnDisabilityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisabilityType")]
	public partial class DisabilityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DisabilityCode;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisabilityCodeChanging(string value);
    partial void OnDisabilityCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DisabilityType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DisabilityCode
		{
			get
			{
				return this._DisabilityCode;
			}
			set
			{
				if ((this._DisabilityCode != value))
				{
					this.OnDisabilityCodeChanging(value);
					this.SendPropertyChanging();
					this._DisabilityCode = value;
					this.SendPropertyChanged("DisabilityCode");
					this.OnDisabilityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.education")]
	public partial class education : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _code;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnupdateChanging(System.Nullable<System.DateTime> value);
    partial void OnupdateChanged();
    #endregion
		
		public education()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[update]", Storage="_update", DbType="DateTime")]
		public System.Nullable<System.DateTime> update
		{
			get
			{
				return this._update;
			}
			set
			{
				if ((this._update != value))
				{
					this.OnupdateChanging(value);
					this.SendPropertyChanging();
					this._update = value;
					this.SendPropertyChanged("update");
					this.OnupdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.education_log")]
	public partial class education_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _code;
		
		private string _Note;
		
		private System.DateTime _update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnupdateChanging(System.DateTime value);
    partial void OnupdateChanged();
    #endregion
		
		public education_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[update]", Storage="_update", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime update
		{
			get
			{
				return this._update;
			}
			set
			{
				if ((this._update != value))
				{
					this.OnupdateChanging(value);
					this.SendPropertyChanging();
					this._update = value;
					this.SendPropertyChanged("update");
					this.OnupdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EducationChild")]
	public partial class EducationChild : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _EducationStatusID;
		
		private string _SchoolName;
		
		private string _Class;
		
		private string _NameofHumanAtSchool;
		
		private string _TelSchool;
		
		private System.Nullable<System.DateTime> _lastupdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnEducationStatusIDChanging(string value);
    partial void OnEducationStatusIDChanged();
    partial void OnSchoolNameChanging(string value);
    partial void OnSchoolNameChanged();
    partial void OnClassChanging(string value);
    partial void OnClassChanged();
    partial void OnNameofHumanAtSchoolChanging(string value);
    partial void OnNameofHumanAtSchoolChanged();
    partial void OnTelSchoolChanging(string value);
    partial void OnTelSchoolChanged();
    partial void OnlastupdateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastupdateChanged();
    #endregion
		
		public EducationChild()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationStatusID", DbType="VarChar(MAX)")]
		public string EducationStatusID
		{
			get
			{
				return this._EducationStatusID;
			}
			set
			{
				if ((this._EducationStatusID != value))
				{
					this.OnEducationStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EducationStatusID = value;
					this.SendPropertyChanged("EducationStatusID");
					this.OnEducationStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolName", DbType="VarChar(MAX)")]
		public string SchoolName
		{
			get
			{
				return this._SchoolName;
			}
			set
			{
				if ((this._SchoolName != value))
				{
					this.OnSchoolNameChanging(value);
					this.SendPropertyChanging();
					this._SchoolName = value;
					this.SendPropertyChanged("SchoolName");
					this.OnSchoolNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Class", DbType="VarChar(MAX)")]
		public string Class
		{
			get
			{
				return this._Class;
			}
			set
			{
				if ((this._Class != value))
				{
					this.OnClassChanging(value);
					this.SendPropertyChanging();
					this._Class = value;
					this.SendPropertyChanged("Class");
					this.OnClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameofHumanAtSchool", DbType="VarChar(MAX)")]
		public string NameofHumanAtSchool
		{
			get
			{
				return this._NameofHumanAtSchool;
			}
			set
			{
				if ((this._NameofHumanAtSchool != value))
				{
					this.OnNameofHumanAtSchoolChanging(value);
					this.SendPropertyChanging();
					this._NameofHumanAtSchool = value;
					this.SendPropertyChanged("NameofHumanAtSchool");
					this.OnNameofHumanAtSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TelSchool", DbType="VarChar(MAX)")]
		public string TelSchool
		{
			get
			{
				return this._TelSchool;
			}
			set
			{
				if ((this._TelSchool != value))
				{
					this.OnTelSchoolChanging(value);
					this.SendPropertyChanging();
					this._TelSchool = value;
					this.SendPropertyChanged("TelSchool");
					this.OnTelSchoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastupdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastupdate
		{
			get
			{
				return this._lastupdate;
			}
			set
			{
				if ((this._lastupdate != value))
				{
					this.OnlastupdateChanging(value);
					this.SendPropertyChanging();
					this._lastupdate = value;
					this.SendPropertyChanged("lastupdate");
					this.OnlastupdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EducationLevel")]
	public partial class EducationLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EducationLevelID;
		
		private string _EducationLevelDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEducationLevelIDChanging(string value);
    partial void OnEducationLevelIDChanged();
    partial void OnEducationLevelDescriptionChanging(string value);
    partial void OnEducationLevelDescriptionChanged();
    #endregion
		
		public EducationLevel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevelID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EducationLevelID
		{
			get
			{
				return this._EducationLevelID;
			}
			set
			{
				if ((this._EducationLevelID != value))
				{
					this.OnEducationLevelIDChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelID = value;
					this.SendPropertyChanged("EducationLevelID");
					this.OnEducationLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevelDescription", DbType="VarChar(MAX)")]
		public string EducationLevelDescription
		{
			get
			{
				return this._EducationLevelDescription;
			}
			set
			{
				if ((this._EducationLevelDescription != value))
				{
					this.OnEducationLevelDescriptionChanging(value);
					this.SendPropertyChanging();
					this._EducationLevelDescription = value;
					this.SendPropertyChanged("EducationLevelDescription");
					this.OnEducationLevelDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EducationStatus")]
	public partial class EducationStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EducationStatusID;
		
		private string _EducationStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEducationStatusIDChanging(string value);
    partial void OnEducationStatusIDChanged();
    partial void OnEducationStatus1Changing(string value);
    partial void OnEducationStatus1Changed();
    #endregion
		
		public EducationStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationStatusID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EducationStatusID
		{
			get
			{
				return this._EducationStatusID;
			}
			set
			{
				if ((this._EducationStatusID != value))
				{
					this.OnEducationStatusIDChanging(value);
					this.SendPropertyChanging();
					this._EducationStatusID = value;
					this.SendPropertyChanged("EducationStatusID");
					this.OnEducationStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EducationStatus", Storage="_EducationStatus1", DbType="VarChar(MAX)")]
		public string EducationStatus1
		{
			get
			{
				return this._EducationStatus1;
			}
			set
			{
				if ((this._EducationStatus1 != value))
				{
					this.OnEducationStatus1Changing(value);
					this.SendPropertyChanging();
					this._EducationStatus1 = value;
					this.SendPropertyChanged("EducationStatus1");
					this.OnEducationStatus1Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_id;
		
		private string _Dept_id;
		
		private string _PID;
		
		private string _Title;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Gender;
		
		private string _DOB;
		
		private string _StreetAddress;
		
		private string _VILLAGE;
		
		private string _TAMBON;
		
		private string _AMPUR;
		
		private string _CHANGWAT;
		
		private string _MSTATUS;
		
		private string _OCCUPA;
		
		private string _RACE;
		
		private string _NATION;
		
		private string _RELIGION;
		
		private string _EDUCATE;
		
		private string _SDATE;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _UDATE;
		
		private string _Activated;
		
		private string _HostID;
		
		private EntitySet<Role_Staff> _Role_Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_idChanging(string value);
    partial void OnStaff_idChanged();
    partial void OnDept_idChanging(string value);
    partial void OnDept_idChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnDOBChanging(string value);
    partial void OnDOBChanged();
    partial void OnStreetAddressChanging(string value);
    partial void OnStreetAddressChanged();
    partial void OnVILLAGEChanging(string value);
    partial void OnVILLAGEChanged();
    partial void OnTAMBONChanging(string value);
    partial void OnTAMBONChanged();
    partial void OnAMPURChanging(string value);
    partial void OnAMPURChanged();
    partial void OnCHANGWATChanging(string value);
    partial void OnCHANGWATChanged();
    partial void OnMSTATUSChanging(string value);
    partial void OnMSTATUSChanged();
    partial void OnOCCUPAChanging(string value);
    partial void OnOCCUPAChanged();
    partial void OnRACEChanging(string value);
    partial void OnRACEChanged();
    partial void OnNATIONChanging(string value);
    partial void OnNATIONChanged();
    partial void OnRELIGIONChanging(string value);
    partial void OnRELIGIONChanged();
    partial void OnEDUCATEChanging(string value);
    partial void OnEDUCATEChanged();
    partial void OnSDATEChanging(string value);
    partial void OnSDATEChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUDATEChanging(System.Nullable<System.DateTime> value);
    partial void OnUDATEChanged();
    partial void OnActivatedChanging(string value);
    partial void OnActivatedChanged();
    partial void OnHostIDChanging(string value);
    partial void OnHostIDChanged();
    #endregion
		
		public Employee()
		{
			this._Role_Staffs = new EntitySet<Role_Staff>(new Action<Role_Staff>(this.attach_Role_Staffs), new Action<Role_Staff>(this.detach_Role_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_id
		{
			get
			{
				return this._Staff_id;
			}
			set
			{
				if ((this._Staff_id != value))
				{
					this.OnStaff_idChanging(value);
					this.SendPropertyChanging();
					this._Staff_id = value;
					this.SendPropertyChanged("Staff_id");
					this.OnStaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dept_id", DbType="VarChar(50)")]
		public string Dept_id
		{
			get
			{
				return this._Dept_id;
			}
			set
			{
				if ((this._Dept_id != value))
				{
					this.OnDept_idChanging(value);
					this.SendPropertyChanging();
					this._Dept_id = value;
					this.SendPropertyChanged("Dept_id");
					this.OnDept_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="VarChar(50)")]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="VarChar(50)")]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="VarChar(50)")]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="VarChar(50)")]
		public string DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StreetAddress", DbType="VarChar(MAX)")]
		public string StreetAddress
		{
			get
			{
				return this._StreetAddress;
			}
			set
			{
				if ((this._StreetAddress != value))
				{
					this.OnStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._StreetAddress = value;
					this.SendPropertyChanged("StreetAddress");
					this.OnStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VILLAGE", DbType="VarChar(50)")]
		public string VILLAGE
		{
			get
			{
				return this._VILLAGE;
			}
			set
			{
				if ((this._VILLAGE != value))
				{
					this.OnVILLAGEChanging(value);
					this.SendPropertyChanging();
					this._VILLAGE = value;
					this.SendPropertyChanged("VILLAGE");
					this.OnVILLAGEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAMBON", DbType="VarChar(50)")]
		public string TAMBON
		{
			get
			{
				return this._TAMBON;
			}
			set
			{
				if ((this._TAMBON != value))
				{
					this.OnTAMBONChanging(value);
					this.SendPropertyChanging();
					this._TAMBON = value;
					this.SendPropertyChanged("TAMBON");
					this.OnTAMBONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMPUR", DbType="VarChar(50)")]
		public string AMPUR
		{
			get
			{
				return this._AMPUR;
			}
			set
			{
				if ((this._AMPUR != value))
				{
					this.OnAMPURChanging(value);
					this.SendPropertyChanging();
					this._AMPUR = value;
					this.SendPropertyChanged("AMPUR");
					this.OnAMPURChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHANGWAT", DbType="VarChar(50)")]
		public string CHANGWAT
		{
			get
			{
				return this._CHANGWAT;
			}
			set
			{
				if ((this._CHANGWAT != value))
				{
					this.OnCHANGWATChanging(value);
					this.SendPropertyChanging();
					this._CHANGWAT = value;
					this.SendPropertyChanged("CHANGWAT");
					this.OnCHANGWATChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MSTATUS", DbType="VarChar(50)")]
		public string MSTATUS
		{
			get
			{
				return this._MSTATUS;
			}
			set
			{
				if ((this._MSTATUS != value))
				{
					this.OnMSTATUSChanging(value);
					this.SendPropertyChanging();
					this._MSTATUS = value;
					this.SendPropertyChanged("MSTATUS");
					this.OnMSTATUSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OCCUPA", DbType="VarChar(50)")]
		public string OCCUPA
		{
			get
			{
				return this._OCCUPA;
			}
			set
			{
				if ((this._OCCUPA != value))
				{
					this.OnOCCUPAChanging(value);
					this.SendPropertyChanging();
					this._OCCUPA = value;
					this.SendPropertyChanged("OCCUPA");
					this.OnOCCUPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RACE", DbType="VarChar(50)")]
		public string RACE
		{
			get
			{
				return this._RACE;
			}
			set
			{
				if ((this._RACE != value))
				{
					this.OnRACEChanging(value);
					this.SendPropertyChanging();
					this._RACE = value;
					this.SendPropertyChanged("RACE");
					this.OnRACEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NATION", DbType="VarChar(50)")]
		public string NATION
		{
			get
			{
				return this._NATION;
			}
			set
			{
				if ((this._NATION != value))
				{
					this.OnNATIONChanging(value);
					this.SendPropertyChanging();
					this._NATION = value;
					this.SendPropertyChanged("NATION");
					this.OnNATIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RELIGION", DbType="VarChar(50)")]
		public string RELIGION
		{
			get
			{
				return this._RELIGION;
			}
			set
			{
				if ((this._RELIGION != value))
				{
					this.OnRELIGIONChanging(value);
					this.SendPropertyChanging();
					this._RELIGION = value;
					this.SendPropertyChanged("RELIGION");
					this.OnRELIGIONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EDUCATE", DbType="VarChar(50)")]
		public string EDUCATE
		{
			get
			{
				return this._EDUCATE;
			}
			set
			{
				if ((this._EDUCATE != value))
				{
					this.OnEDUCATEChanging(value);
					this.SendPropertyChanging();
					this._EDUCATE = value;
					this.SendPropertyChanged("EDUCATE");
					this.OnEDUCATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SDATE", DbType="VarChar(50)")]
		public string SDATE
		{
			get
			{
				return this._SDATE;
			}
			set
			{
				if ((this._SDATE != value))
				{
					this.OnSDATEChanging(value);
					this.SendPropertyChanging();
					this._SDATE = value;
					this.SendPropertyChanged("SDATE");
					this.OnSDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UDATE", DbType="DateTime")]
		public System.Nullable<System.DateTime> UDATE
		{
			get
			{
				return this._UDATE;
			}
			set
			{
				if ((this._UDATE != value))
				{
					this.OnUDATEChanging(value);
					this.SendPropertyChanging();
					this._UDATE = value;
					this.SendPropertyChanged("UDATE");
					this.OnUDATEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activated", DbType="VarChar(50)")]
		public string Activated
		{
			get
			{
				return this._Activated;
			}
			set
			{
				if ((this._Activated != value))
				{
					this.OnActivatedChanging(value);
					this.SendPropertyChanging();
					this._Activated = value;
					this.SendPropertyChanged("Activated");
					this.OnActivatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostID", DbType="VarChar(50)")]
		public string HostID
		{
			get
			{
				return this._HostID;
			}
			set
			{
				if ((this._HostID != value))
				{
					this.OnHostIDChanging(value);
					this.SendPropertyChanging();
					this._HostID = value;
					this.SendPropertyChanged("HostID");
					this.OnHostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Role_Staff", Storage="_Role_Staffs", ThisKey="Staff_id", OtherKey="Staff_id")]
		public EntitySet<Role_Staff> Role_Staffs
		{
			get
			{
				return this._Role_Staffs;
			}
			set
			{
				this._Role_Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Role_Staffs(Role_Staff entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_Role_Staffs(Role_Staff entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evaluation")]
	public partial class Evaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _HostCode;
		
		private string _StaffCode;
		
		private string _HostID;
		
		private string _StaffID;
		
		private string _Co1Code;
		
		private string _Co2Code;
		
		private string _Co3Code;
		
		private string _Co4Code;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntitySet<DisabilityEvaluation> _DisabilityEvaluations;
		
		private EntitySet<FavorList> _FavorLists;
		
		private EntitySet<GrowthEvaluation> _GrowthEvaluations;
		
		private EntitySet<HealthEvaluation> _HealthEvaluations;
		
		private EntitySet<HearEvaluation> _HearEvaluations;
		
		private EntitySet<PhysicalEvaluation> _PhysicalEvaluations;
		
		private EntitySet<SightEvaluation> _SightEvaluations;
		
		private EntitySet<Tool> _Tools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnHostCodeChanging(string value);
    partial void OnHostCodeChanged();
    partial void OnStaffCodeChanging(string value);
    partial void OnStaffCodeChanged();
    partial void OnHostIDChanging(string value);
    partial void OnHostIDChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnCo1CodeChanging(string value);
    partial void OnCo1CodeChanged();
    partial void OnCo2CodeChanging(string value);
    partial void OnCo2CodeChanged();
    partial void OnCo3CodeChanging(string value);
    partial void OnCo3CodeChanged();
    partial void OnCo4CodeChanging(string value);
    partial void OnCo4CodeChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public Evaluation()
		{
			this._DisabilityEvaluations = new EntitySet<DisabilityEvaluation>(new Action<DisabilityEvaluation>(this.attach_DisabilityEvaluations), new Action<DisabilityEvaluation>(this.detach_DisabilityEvaluations));
			this._FavorLists = new EntitySet<FavorList>(new Action<FavorList>(this.attach_FavorLists), new Action<FavorList>(this.detach_FavorLists));
			this._GrowthEvaluations = new EntitySet<GrowthEvaluation>(new Action<GrowthEvaluation>(this.attach_GrowthEvaluations), new Action<GrowthEvaluation>(this.detach_GrowthEvaluations));
			this._HealthEvaluations = new EntitySet<HealthEvaluation>(new Action<HealthEvaluation>(this.attach_HealthEvaluations), new Action<HealthEvaluation>(this.detach_HealthEvaluations));
			this._HearEvaluations = new EntitySet<HearEvaluation>(new Action<HearEvaluation>(this.attach_HearEvaluations), new Action<HearEvaluation>(this.detach_HearEvaluations));
			this._PhysicalEvaluations = new EntitySet<PhysicalEvaluation>(new Action<PhysicalEvaluation>(this.attach_PhysicalEvaluations), new Action<PhysicalEvaluation>(this.detach_PhysicalEvaluations));
			this._SightEvaluations = new EntitySet<SightEvaluation>(new Action<SightEvaluation>(this.attach_SightEvaluations), new Action<SightEvaluation>(this.detach_SightEvaluations));
			this._Tools = new EntitySet<Tool>(new Action<Tool>(this.attach_Tools), new Action<Tool>(this.detach_Tools));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostCode", DbType="VarChar(50)")]
		public string HostCode
		{
			get
			{
				return this._HostCode;
			}
			set
			{
				if ((this._HostCode != value))
				{
					this.OnHostCodeChanging(value);
					this.SendPropertyChanging();
					this._HostCode = value;
					this.SendPropertyChanged("HostCode");
					this.OnHostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffCode", DbType="VarChar(50)")]
		public string StaffCode
		{
			get
			{
				return this._StaffCode;
			}
			set
			{
				if ((this._StaffCode != value))
				{
					this.OnStaffCodeChanging(value);
					this.SendPropertyChanging();
					this._StaffCode = value;
					this.SendPropertyChanged("StaffCode");
					this.OnStaffCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostID", DbType="VarChar(50)")]
		public string HostID
		{
			get
			{
				return this._HostID;
			}
			set
			{
				if ((this._HostID != value))
				{
					this.OnHostIDChanging(value);
					this.SendPropertyChanging();
					this._HostID = value;
					this.SendPropertyChanged("HostID");
					this.OnHostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="VarChar(50)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Co1Code", DbType="VarChar(50)")]
		public string Co1Code
		{
			get
			{
				return this._Co1Code;
			}
			set
			{
				if ((this._Co1Code != value))
				{
					this.OnCo1CodeChanging(value);
					this.SendPropertyChanging();
					this._Co1Code = value;
					this.SendPropertyChanged("Co1Code");
					this.OnCo1CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Co2Code", DbType="VarChar(50)")]
		public string Co2Code
		{
			get
			{
				return this._Co2Code;
			}
			set
			{
				if ((this._Co2Code != value))
				{
					this.OnCo2CodeChanging(value);
					this.SendPropertyChanging();
					this._Co2Code = value;
					this.SendPropertyChanged("Co2Code");
					this.OnCo2CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Co3Code", DbType="VarChar(50)")]
		public string Co3Code
		{
			get
			{
				return this._Co3Code;
			}
			set
			{
				if ((this._Co3Code != value))
				{
					this.OnCo3CodeChanging(value);
					this.SendPropertyChanging();
					this._Co3Code = value;
					this.SendPropertyChanged("Co3Code");
					this.OnCo3CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Co4Code", DbType="VarChar(50)")]
		public string Co4Code
		{
			get
			{
				return this._Co4Code;
			}
			set
			{
				if ((this._Co4Code != value))
				{
					this.OnCo4CodeChanging(value);
					this.SendPropertyChanging();
					this._Co4Code = value;
					this.SendPropertyChanged("Co4Code");
					this.OnCo4CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_DisabilityEvaluation", Storage="_DisabilityEvaluations", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<DisabilityEvaluation> DisabilityEvaluations
		{
			get
			{
				return this._DisabilityEvaluations;
			}
			set
			{
				this._DisabilityEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_FavorList", Storage="_FavorLists", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<FavorList> FavorLists
		{
			get
			{
				return this._FavorLists;
			}
			set
			{
				this._FavorLists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_GrowthEvaluation", Storage="_GrowthEvaluations", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<GrowthEvaluation> GrowthEvaluations
		{
			get
			{
				return this._GrowthEvaluations;
			}
			set
			{
				this._GrowthEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_HealthEvaluation", Storage="_HealthEvaluations", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<HealthEvaluation> HealthEvaluations
		{
			get
			{
				return this._HealthEvaluations;
			}
			set
			{
				this._HealthEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_HearEvaluation", Storage="_HearEvaluations", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<HearEvaluation> HearEvaluations
		{
			get
			{
				return this._HearEvaluations;
			}
			set
			{
				this._HearEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_PhysicalEvaluation", Storage="_PhysicalEvaluations", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<PhysicalEvaluation> PhysicalEvaluations
		{
			get
			{
				return this._PhysicalEvaluations;
			}
			set
			{
				this._PhysicalEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_SightEvaluation", Storage="_SightEvaluations", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<SightEvaluation> SightEvaluations
		{
			get
			{
				return this._SightEvaluations;
			}
			set
			{
				this._SightEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Tool", Storage="_Tools", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo")]
		public EntitySet<Tool> Tools
		{
			get
			{
				return this._Tools;
			}
			set
			{
				this._Tools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DisabilityEvaluations(DisabilityEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_DisabilityEvaluations(DisabilityEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_FavorLists(FavorList entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_FavorLists(FavorList entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_GrowthEvaluations(GrowthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_GrowthEvaluations(GrowthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_HealthEvaluations(HealthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_HealthEvaluations(HealthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_HearEvaluations(HearEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_HearEvaluations(HearEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_PhysicalEvaluations(PhysicalEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_PhysicalEvaluations(PhysicalEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_SightEvaluations(SightEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_SightEvaluations(SightEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
		
		private void attach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = this;
		}
		
		private void detach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.Evaluation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExistingWelfare")]
	public partial class ExistingWelfare : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _InsuranceOrg;
		
		private string _InsuranceType;
		
		private string _InsuranceCardID;
		
		private string _InsuranceCardIssueDate;
		
		private string _InsuranceCardExpDate;
		
		private string _InsurancePCU;
		
		private string _InsuranceHospital;
		
		private string _DisableType;
		
		private string _DisabilityType;
		
		private string _DisableCardID;
		
		private string _DisableCardIssueDate;
		
		private string _DisableCardExpDate;
		
		private string _DisabilityAllowance;
		
		private string _CouponStudy;
		
		private System.Nullable<System.DateTime> _DateTimeUpdate;
		
		private string _InsuranceCardPic;
		
		private string _DisableCardIDPic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnInsuranceOrgChanging(string value);
    partial void OnInsuranceOrgChanged();
    partial void OnInsuranceTypeChanging(string value);
    partial void OnInsuranceTypeChanged();
    partial void OnInsuranceCardIDChanging(string value);
    partial void OnInsuranceCardIDChanged();
    partial void OnInsuranceCardIssueDateChanging(string value);
    partial void OnInsuranceCardIssueDateChanged();
    partial void OnInsuranceCardExpDateChanging(string value);
    partial void OnInsuranceCardExpDateChanged();
    partial void OnInsurancePCUChanging(string value);
    partial void OnInsurancePCUChanged();
    partial void OnInsuranceHospitalChanging(string value);
    partial void OnInsuranceHospitalChanged();
    partial void OnDisableTypeChanging(string value);
    partial void OnDisableTypeChanged();
    partial void OnDisabilityTypeChanging(string value);
    partial void OnDisabilityTypeChanged();
    partial void OnDisableCardIDChanging(string value);
    partial void OnDisableCardIDChanged();
    partial void OnDisableCardIssueDateChanging(string value);
    partial void OnDisableCardIssueDateChanged();
    partial void OnDisableCardExpDateChanging(string value);
    partial void OnDisableCardExpDateChanged();
    partial void OnDisabilityAllowanceChanging(string value);
    partial void OnDisabilityAllowanceChanged();
    partial void OnCouponStudyChanging(string value);
    partial void OnCouponStudyChanged();
    partial void OnDateTimeUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeUpdateChanged();
    partial void OnInsuranceCardPicChanging(string value);
    partial void OnInsuranceCardPicChanged();
    partial void OnDisableCardIDPicChanging(string value);
    partial void OnDisableCardIDPicChanged();
    #endregion
		
		public ExistingWelfare()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceOrg", DbType="VarChar(MAX)")]
		public string InsuranceOrg
		{
			get
			{
				return this._InsuranceOrg;
			}
			set
			{
				if ((this._InsuranceOrg != value))
				{
					this.OnInsuranceOrgChanging(value);
					this.SendPropertyChanging();
					this._InsuranceOrg = value;
					this.SendPropertyChanged("InsuranceOrg");
					this.OnInsuranceOrgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceType", DbType="VarChar(MAX)")]
		public string InsuranceType
		{
			get
			{
				return this._InsuranceType;
			}
			set
			{
				if ((this._InsuranceType != value))
				{
					this.OnInsuranceTypeChanging(value);
					this.SendPropertyChanging();
					this._InsuranceType = value;
					this.SendPropertyChanged("InsuranceType");
					this.OnInsuranceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCardID", DbType="VarChar(MAX)")]
		public string InsuranceCardID
		{
			get
			{
				return this._InsuranceCardID;
			}
			set
			{
				if ((this._InsuranceCardID != value))
				{
					this.OnInsuranceCardIDChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCardID = value;
					this.SendPropertyChanged("InsuranceCardID");
					this.OnInsuranceCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCardIssueDate", DbType="VarChar(MAX)")]
		public string InsuranceCardIssueDate
		{
			get
			{
				return this._InsuranceCardIssueDate;
			}
			set
			{
				if ((this._InsuranceCardIssueDate != value))
				{
					this.OnInsuranceCardIssueDateChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCardIssueDate = value;
					this.SendPropertyChanged("InsuranceCardIssueDate");
					this.OnInsuranceCardIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCardExpDate", DbType="VarChar(MAX)")]
		public string InsuranceCardExpDate
		{
			get
			{
				return this._InsuranceCardExpDate;
			}
			set
			{
				if ((this._InsuranceCardExpDate != value))
				{
					this.OnInsuranceCardExpDateChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCardExpDate = value;
					this.SendPropertyChanged("InsuranceCardExpDate");
					this.OnInsuranceCardExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurancePCU", DbType="VarChar(MAX)")]
		public string InsurancePCU
		{
			get
			{
				return this._InsurancePCU;
			}
			set
			{
				if ((this._InsurancePCU != value))
				{
					this.OnInsurancePCUChanging(value);
					this.SendPropertyChanging();
					this._InsurancePCU = value;
					this.SendPropertyChanged("InsurancePCU");
					this.OnInsurancePCUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceHospital", DbType="VarChar(MAX)")]
		public string InsuranceHospital
		{
			get
			{
				return this._InsuranceHospital;
			}
			set
			{
				if ((this._InsuranceHospital != value))
				{
					this.OnInsuranceHospitalChanging(value);
					this.SendPropertyChanging();
					this._InsuranceHospital = value;
					this.SendPropertyChanged("InsuranceHospital");
					this.OnInsuranceHospitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisableType", DbType="VarChar(MAX)")]
		public string DisableType
		{
			get
			{
				return this._DisableType;
			}
			set
			{
				if ((this._DisableType != value))
				{
					this.OnDisableTypeChanging(value);
					this.SendPropertyChanging();
					this._DisableType = value;
					this.SendPropertyChanged("DisableType");
					this.OnDisableTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityType", DbType="VarChar(MAX)")]
		public string DisabilityType
		{
			get
			{
				return this._DisabilityType;
			}
			set
			{
				if ((this._DisabilityType != value))
				{
					this.OnDisabilityTypeChanging(value);
					this.SendPropertyChanging();
					this._DisabilityType = value;
					this.SendPropertyChanged("DisabilityType");
					this.OnDisabilityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisableCardID", DbType="VarChar(MAX)")]
		public string DisableCardID
		{
			get
			{
				return this._DisableCardID;
			}
			set
			{
				if ((this._DisableCardID != value))
				{
					this.OnDisableCardIDChanging(value);
					this.SendPropertyChanging();
					this._DisableCardID = value;
					this.SendPropertyChanged("DisableCardID");
					this.OnDisableCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisableCardIssueDate", DbType="VarChar(MAX)")]
		public string DisableCardIssueDate
		{
			get
			{
				return this._DisableCardIssueDate;
			}
			set
			{
				if ((this._DisableCardIssueDate != value))
				{
					this.OnDisableCardIssueDateChanging(value);
					this.SendPropertyChanging();
					this._DisableCardIssueDate = value;
					this.SendPropertyChanged("DisableCardIssueDate");
					this.OnDisableCardIssueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisableCardExpDate", DbType="VarChar(MAX)")]
		public string DisableCardExpDate
		{
			get
			{
				return this._DisableCardExpDate;
			}
			set
			{
				if ((this._DisableCardExpDate != value))
				{
					this.OnDisableCardExpDateChanging(value);
					this.SendPropertyChanging();
					this._DisableCardExpDate = value;
					this.SendPropertyChanged("DisableCardExpDate");
					this.OnDisableCardExpDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityAllowance", DbType="VarChar(MAX)")]
		public string DisabilityAllowance
		{
			get
			{
				return this._DisabilityAllowance;
			}
			set
			{
				if ((this._DisabilityAllowance != value))
				{
					this.OnDisabilityAllowanceChanging(value);
					this.SendPropertyChanging();
					this._DisabilityAllowance = value;
					this.SendPropertyChanged("DisabilityAllowance");
					this.OnDisabilityAllowanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CouponStudy", DbType="VarChar(MAX)")]
		public string CouponStudy
		{
			get
			{
				return this._CouponStudy;
			}
			set
			{
				if ((this._CouponStudy != value))
				{
					this.OnCouponStudyChanging(value);
					this.SendPropertyChanging();
					this._CouponStudy = value;
					this.SendPropertyChanged("CouponStudy");
					this.OnCouponStudyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeUpdate
		{
			get
			{
				return this._DateTimeUpdate;
			}
			set
			{
				if ((this._DateTimeUpdate != value))
				{
					this.OnDateTimeUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateTimeUpdate = value;
					this.SendPropertyChanged("DateTimeUpdate");
					this.OnDateTimeUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceCardPic", DbType="VarChar(MAX)")]
		public string InsuranceCardPic
		{
			get
			{
				return this._InsuranceCardPic;
			}
			set
			{
				if ((this._InsuranceCardPic != value))
				{
					this.OnInsuranceCardPicChanging(value);
					this.SendPropertyChanging();
					this._InsuranceCardPic = value;
					this.SendPropertyChanged("InsuranceCardPic");
					this.OnInsuranceCardPicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisableCardIDPic", DbType="VarChar(MAX)")]
		public string DisableCardIDPic
		{
			get
			{
				return this._DisableCardIDPic;
			}
			set
			{
				if ((this._DisableCardIDPic != value))
				{
					this.OnDisableCardIDPicChanging(value);
					this.SendPropertyChanging();
					this._DisableCardIDPic = value;
					this.SendPropertyChanged("DisableCardIDPic");
					this.OnDisableCardIDPicChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Family")]
	public partial class Family : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FMemberCID;
		
		private string _CID;
		
		private string _Title;
		
		private string _Relation;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _MariageStatus;
		
		private string _LiveStatus;
		
		private string _EducationLevel;
		
		private string _Occupation;
		
		private string _Nation;
		
		private string _Race;
		
		private string _Religion;
		
		private string _AddressOccupation;
		
		private string _IncomePerMonth;
		
		private string _OtherIncome;
		
		private string _OtherIncomeFrom;
		
		private string _LiveHouseNumber;
		
		private string _LiveMooNumber;
		
		private string _LiveVillageName;
		
		private string _LiveAlley;
		
		private string _LiveStreetName;
		
		private string _LiveTumbon;
		
		private string _LiveCity;
		
		private string _LiveProvince;
		
		private string _LivePostCode;
		
		private System.Nullable<System.DateTime> _LiveMoveInDate;
		
		private System.Nullable<System.DateTime> _LiveMoveOutDate;
		
		private string _LiveMoveOutReason;
		
		private string _CensusHouseNumber;
		
		private string _CensusMooNumber;
		
		private string _CensusVillageName;
		
		private string _CensusAlley;
		
		private string _CensusStreetName;
		
		private string _CensusTumbon;
		
		private string _CensusCity;
		
		private string _CensusProvince;
		
		private string _CensusPostCode;
		
		private System.Nullable<System.DateTime> _CensusMoveInDate;
		
		private System.Nullable<System.DateTime> _CensusMoveOutDate;
		
		private string _CensusMoveOutReason;
		
		private string _CarerStatus;
		
		private System.Nullable<System.DateTime> _DateTimeUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFMemberCIDChanging(string value);
    partial void OnFMemberCIDChanged();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnRelationChanging(string value);
    partial void OnRelationChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnMariageStatusChanging(string value);
    partial void OnMariageStatusChanged();
    partial void OnLiveStatusChanging(string value);
    partial void OnLiveStatusChanged();
    partial void OnEducationLevelChanging(string value);
    partial void OnEducationLevelChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnNationChanging(string value);
    partial void OnNationChanged();
    partial void OnRaceChanging(string value);
    partial void OnRaceChanged();
    partial void OnReligionChanging(string value);
    partial void OnReligionChanged();
    partial void OnAddressOccupationChanging(string value);
    partial void OnAddressOccupationChanged();
    partial void OnIncomePerMonthChanging(string value);
    partial void OnIncomePerMonthChanged();
    partial void OnOtherIncomeChanging(string value);
    partial void OnOtherIncomeChanged();
    partial void OnOtherIncomeFromChanging(string value);
    partial void OnOtherIncomeFromChanged();
    partial void OnLiveHouseNumberChanging(string value);
    partial void OnLiveHouseNumberChanged();
    partial void OnLiveMooNumberChanging(string value);
    partial void OnLiveMooNumberChanged();
    partial void OnLiveVillageNameChanging(string value);
    partial void OnLiveVillageNameChanged();
    partial void OnLiveAlleyChanging(string value);
    partial void OnLiveAlleyChanged();
    partial void OnLiveStreetNameChanging(string value);
    partial void OnLiveStreetNameChanged();
    partial void OnLiveTumbonChanging(string value);
    partial void OnLiveTumbonChanged();
    partial void OnLiveCityChanging(string value);
    partial void OnLiveCityChanged();
    partial void OnLiveProvinceChanging(string value);
    partial void OnLiveProvinceChanged();
    partial void OnLivePostCodeChanging(string value);
    partial void OnLivePostCodeChanged();
    partial void OnLiveMoveInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLiveMoveInDateChanged();
    partial void OnLiveMoveOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLiveMoveOutDateChanged();
    partial void OnLiveMoveOutReasonChanging(string value);
    partial void OnLiveMoveOutReasonChanged();
    partial void OnCensusHouseNumberChanging(string value);
    partial void OnCensusHouseNumberChanged();
    partial void OnCensusMooNumberChanging(string value);
    partial void OnCensusMooNumberChanged();
    partial void OnCensusVillageNameChanging(string value);
    partial void OnCensusVillageNameChanged();
    partial void OnCensusAlleyChanging(string value);
    partial void OnCensusAlleyChanged();
    partial void OnCensusStreetNameChanging(string value);
    partial void OnCensusStreetNameChanged();
    partial void OnCensusTumbonChanging(string value);
    partial void OnCensusTumbonChanged();
    partial void OnCensusCityChanging(string value);
    partial void OnCensusCityChanged();
    partial void OnCensusProvinceChanging(string value);
    partial void OnCensusProvinceChanged();
    partial void OnCensusPostCodeChanging(string value);
    partial void OnCensusPostCodeChanged();
    partial void OnCensusMoveInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCensusMoveInDateChanged();
    partial void OnCensusMoveOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCensusMoveOutDateChanged();
    partial void OnCensusMoveOutReasonChanging(string value);
    partial void OnCensusMoveOutReasonChanged();
    partial void OnCarerStatusChanging(string value);
    partial void OnCarerStatusChanged();
    partial void OnDateTimeUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeUpdateChanged();
    #endregion
		
		public Family()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FMemberCID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FMemberCID
		{
			get
			{
				return this._FMemberCID;
			}
			set
			{
				if ((this._FMemberCID != value))
				{
					this.OnFMemberCIDChanging(value);
					this.SendPropertyChanging();
					this._FMemberCID = value;
					this.SendPropertyChanged("FMemberCID");
					this.OnFMemberCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Relation", DbType="VarChar(MAX)")]
		public string Relation
		{
			get
			{
				return this._Relation;
			}
			set
			{
				if ((this._Relation != value))
				{
					this.OnRelationChanging(value);
					this.SendPropertyChanging();
					this._Relation = value;
					this.SendPropertyChanged("Relation");
					this.OnRelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MariageStatus", DbType="VarChar(MAX)")]
		public string MariageStatus
		{
			get
			{
				return this._MariageStatus;
			}
			set
			{
				if ((this._MariageStatus != value))
				{
					this.OnMariageStatusChanging(value);
					this.SendPropertyChanging();
					this._MariageStatus = value;
					this.SendPropertyChanged("MariageStatus");
					this.OnMariageStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveStatus", DbType="VarChar(MAX)")]
		public string LiveStatus
		{
			get
			{
				return this._LiveStatus;
			}
			set
			{
				if ((this._LiveStatus != value))
				{
					this.OnLiveStatusChanging(value);
					this.SendPropertyChanging();
					this._LiveStatus = value;
					this.SendPropertyChanged("LiveStatus");
					this.OnLiveStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EducationLevel", DbType="VarChar(MAX)")]
		public string EducationLevel
		{
			get
			{
				return this._EducationLevel;
			}
			set
			{
				if ((this._EducationLevel != value))
				{
					this.OnEducationLevelChanging(value);
					this.SendPropertyChanging();
					this._EducationLevel = value;
					this.SendPropertyChanged("EducationLevel");
					this.OnEducationLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="VarChar(MAX)")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nation", DbType="VarChar(MAX)")]
		public string Nation
		{
			get
			{
				return this._Nation;
			}
			set
			{
				if ((this._Nation != value))
				{
					this.OnNationChanging(value);
					this.SendPropertyChanging();
					this._Nation = value;
					this.SendPropertyChanged("Nation");
					this.OnNationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Race", DbType="VarChar(MAX)")]
		public string Race
		{
			get
			{
				return this._Race;
			}
			set
			{
				if ((this._Race != value))
				{
					this.OnRaceChanging(value);
					this.SendPropertyChanging();
					this._Race = value;
					this.SendPropertyChanged("Race");
					this.OnRaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Religion", DbType="VarChar(MAX)")]
		public string Religion
		{
			get
			{
				return this._Religion;
			}
			set
			{
				if ((this._Religion != value))
				{
					this.OnReligionChanging(value);
					this.SendPropertyChanging();
					this._Religion = value;
					this.SendPropertyChanged("Religion");
					this.OnReligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressOccupation", DbType="VarChar(MAX)")]
		public string AddressOccupation
		{
			get
			{
				return this._AddressOccupation;
			}
			set
			{
				if ((this._AddressOccupation != value))
				{
					this.OnAddressOccupationChanging(value);
					this.SendPropertyChanging();
					this._AddressOccupation = value;
					this.SendPropertyChanged("AddressOccupation");
					this.OnAddressOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomePerMonth", DbType="VarChar(MAX)")]
		public string IncomePerMonth
		{
			get
			{
				return this._IncomePerMonth;
			}
			set
			{
				if ((this._IncomePerMonth != value))
				{
					this.OnIncomePerMonthChanging(value);
					this.SendPropertyChanging();
					this._IncomePerMonth = value;
					this.SendPropertyChanged("IncomePerMonth");
					this.OnIncomePerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherIncome", DbType="VarChar(MAX)")]
		public string OtherIncome
		{
			get
			{
				return this._OtherIncome;
			}
			set
			{
				if ((this._OtherIncome != value))
				{
					this.OnOtherIncomeChanging(value);
					this.SendPropertyChanging();
					this._OtherIncome = value;
					this.SendPropertyChanged("OtherIncome");
					this.OnOtherIncomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherIncomeFrom", DbType="VarChar(MAX)")]
		public string OtherIncomeFrom
		{
			get
			{
				return this._OtherIncomeFrom;
			}
			set
			{
				if ((this._OtherIncomeFrom != value))
				{
					this.OnOtherIncomeFromChanging(value);
					this.SendPropertyChanging();
					this._OtherIncomeFrom = value;
					this.SendPropertyChanged("OtherIncomeFrom");
					this.OnOtherIncomeFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveHouseNumber", DbType="VarChar(MAX)")]
		public string LiveHouseNumber
		{
			get
			{
				return this._LiveHouseNumber;
			}
			set
			{
				if ((this._LiveHouseNumber != value))
				{
					this.OnLiveHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._LiveHouseNumber = value;
					this.SendPropertyChanged("LiveHouseNumber");
					this.OnLiveHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMooNumber", DbType="VarChar(MAX)")]
		public string LiveMooNumber
		{
			get
			{
				return this._LiveMooNumber;
			}
			set
			{
				if ((this._LiveMooNumber != value))
				{
					this.OnLiveMooNumberChanging(value);
					this.SendPropertyChanging();
					this._LiveMooNumber = value;
					this.SendPropertyChanged("LiveMooNumber");
					this.OnLiveMooNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveVillageName", DbType="VarChar(MAX)")]
		public string LiveVillageName
		{
			get
			{
				return this._LiveVillageName;
			}
			set
			{
				if ((this._LiveVillageName != value))
				{
					this.OnLiveVillageNameChanging(value);
					this.SendPropertyChanging();
					this._LiveVillageName = value;
					this.SendPropertyChanged("LiveVillageName");
					this.OnLiveVillageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveAlley", DbType="VarChar(MAX)")]
		public string LiveAlley
		{
			get
			{
				return this._LiveAlley;
			}
			set
			{
				if ((this._LiveAlley != value))
				{
					this.OnLiveAlleyChanging(value);
					this.SendPropertyChanging();
					this._LiveAlley = value;
					this.SendPropertyChanged("LiveAlley");
					this.OnLiveAlleyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveStreetName", DbType="VarChar(MAX)")]
		public string LiveStreetName
		{
			get
			{
				return this._LiveStreetName;
			}
			set
			{
				if ((this._LiveStreetName != value))
				{
					this.OnLiveStreetNameChanging(value);
					this.SendPropertyChanging();
					this._LiveStreetName = value;
					this.SendPropertyChanged("LiveStreetName");
					this.OnLiveStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveTumbon", DbType="VarChar(MAX)")]
		public string LiveTumbon
		{
			get
			{
				return this._LiveTumbon;
			}
			set
			{
				if ((this._LiveTumbon != value))
				{
					this.OnLiveTumbonChanging(value);
					this.SendPropertyChanging();
					this._LiveTumbon = value;
					this.SendPropertyChanged("LiveTumbon");
					this.OnLiveTumbonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveCity", DbType="VarChar(MAX)")]
		public string LiveCity
		{
			get
			{
				return this._LiveCity;
			}
			set
			{
				if ((this._LiveCity != value))
				{
					this.OnLiveCityChanging(value);
					this.SendPropertyChanging();
					this._LiveCity = value;
					this.SendPropertyChanged("LiveCity");
					this.OnLiveCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveProvince", DbType="VarChar(MAX)")]
		public string LiveProvince
		{
			get
			{
				return this._LiveProvince;
			}
			set
			{
				if ((this._LiveProvince != value))
				{
					this.OnLiveProvinceChanging(value);
					this.SendPropertyChanging();
					this._LiveProvince = value;
					this.SendPropertyChanged("LiveProvince");
					this.OnLiveProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivePostCode", DbType="VarChar(MAX)")]
		public string LivePostCode
		{
			get
			{
				return this._LivePostCode;
			}
			set
			{
				if ((this._LivePostCode != value))
				{
					this.OnLivePostCodeChanging(value);
					this.SendPropertyChanging();
					this._LivePostCode = value;
					this.SendPropertyChanged("LivePostCode");
					this.OnLivePostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMoveInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LiveMoveInDate
		{
			get
			{
				return this._LiveMoveInDate;
			}
			set
			{
				if ((this._LiveMoveInDate != value))
				{
					this.OnLiveMoveInDateChanging(value);
					this.SendPropertyChanging();
					this._LiveMoveInDate = value;
					this.SendPropertyChanged("LiveMoveInDate");
					this.OnLiveMoveInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMoveOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LiveMoveOutDate
		{
			get
			{
				return this._LiveMoveOutDate;
			}
			set
			{
				if ((this._LiveMoveOutDate != value))
				{
					this.OnLiveMoveOutDateChanging(value);
					this.SendPropertyChanging();
					this._LiveMoveOutDate = value;
					this.SendPropertyChanged("LiveMoveOutDate");
					this.OnLiveMoveOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMoveOutReason", DbType="VarChar(MAX)")]
		public string LiveMoveOutReason
		{
			get
			{
				return this._LiveMoveOutReason;
			}
			set
			{
				if ((this._LiveMoveOutReason != value))
				{
					this.OnLiveMoveOutReasonChanging(value);
					this.SendPropertyChanging();
					this._LiveMoveOutReason = value;
					this.SendPropertyChanged("LiveMoveOutReason");
					this.OnLiveMoveOutReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusHouseNumber", DbType="VarChar(MAX)")]
		public string CensusHouseNumber
		{
			get
			{
				return this._CensusHouseNumber;
			}
			set
			{
				if ((this._CensusHouseNumber != value))
				{
					this.OnCensusHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._CensusHouseNumber = value;
					this.SendPropertyChanged("CensusHouseNumber");
					this.OnCensusHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMooNumber", DbType="VarChar(MAX)")]
		public string CensusMooNumber
		{
			get
			{
				return this._CensusMooNumber;
			}
			set
			{
				if ((this._CensusMooNumber != value))
				{
					this.OnCensusMooNumberChanging(value);
					this.SendPropertyChanging();
					this._CensusMooNumber = value;
					this.SendPropertyChanged("CensusMooNumber");
					this.OnCensusMooNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusVillageName", DbType="VarChar(MAX)")]
		public string CensusVillageName
		{
			get
			{
				return this._CensusVillageName;
			}
			set
			{
				if ((this._CensusVillageName != value))
				{
					this.OnCensusVillageNameChanging(value);
					this.SendPropertyChanging();
					this._CensusVillageName = value;
					this.SendPropertyChanged("CensusVillageName");
					this.OnCensusVillageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusAlley", DbType="VarChar(MAX)")]
		public string CensusAlley
		{
			get
			{
				return this._CensusAlley;
			}
			set
			{
				if ((this._CensusAlley != value))
				{
					this.OnCensusAlleyChanging(value);
					this.SendPropertyChanging();
					this._CensusAlley = value;
					this.SendPropertyChanged("CensusAlley");
					this.OnCensusAlleyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusStreetName", DbType="VarChar(MAX)")]
		public string CensusStreetName
		{
			get
			{
				return this._CensusStreetName;
			}
			set
			{
				if ((this._CensusStreetName != value))
				{
					this.OnCensusStreetNameChanging(value);
					this.SendPropertyChanging();
					this._CensusStreetName = value;
					this.SendPropertyChanged("CensusStreetName");
					this.OnCensusStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusTumbon", DbType="VarChar(MAX)")]
		public string CensusTumbon
		{
			get
			{
				return this._CensusTumbon;
			}
			set
			{
				if ((this._CensusTumbon != value))
				{
					this.OnCensusTumbonChanging(value);
					this.SendPropertyChanging();
					this._CensusTumbon = value;
					this.SendPropertyChanged("CensusTumbon");
					this.OnCensusTumbonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusCity", DbType="VarChar(MAX)")]
		public string CensusCity
		{
			get
			{
				return this._CensusCity;
			}
			set
			{
				if ((this._CensusCity != value))
				{
					this.OnCensusCityChanging(value);
					this.SendPropertyChanging();
					this._CensusCity = value;
					this.SendPropertyChanged("CensusCity");
					this.OnCensusCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusProvince", DbType="VarChar(MAX)")]
		public string CensusProvince
		{
			get
			{
				return this._CensusProvince;
			}
			set
			{
				if ((this._CensusProvince != value))
				{
					this.OnCensusProvinceChanging(value);
					this.SendPropertyChanging();
					this._CensusProvince = value;
					this.SendPropertyChanged("CensusProvince");
					this.OnCensusProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusPostCode", DbType="VarChar(MAX)")]
		public string CensusPostCode
		{
			get
			{
				return this._CensusPostCode;
			}
			set
			{
				if ((this._CensusPostCode != value))
				{
					this.OnCensusPostCodeChanging(value);
					this.SendPropertyChanging();
					this._CensusPostCode = value;
					this.SendPropertyChanged("CensusPostCode");
					this.OnCensusPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMoveInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CensusMoveInDate
		{
			get
			{
				return this._CensusMoveInDate;
			}
			set
			{
				if ((this._CensusMoveInDate != value))
				{
					this.OnCensusMoveInDateChanging(value);
					this.SendPropertyChanging();
					this._CensusMoveInDate = value;
					this.SendPropertyChanged("CensusMoveInDate");
					this.OnCensusMoveInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMoveOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CensusMoveOutDate
		{
			get
			{
				return this._CensusMoveOutDate;
			}
			set
			{
				if ((this._CensusMoveOutDate != value))
				{
					this.OnCensusMoveOutDateChanging(value);
					this.SendPropertyChanging();
					this._CensusMoveOutDate = value;
					this.SendPropertyChanged("CensusMoveOutDate");
					this.OnCensusMoveOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMoveOutReason", DbType="VarChar(MAX)")]
		public string CensusMoveOutReason
		{
			get
			{
				return this._CensusMoveOutReason;
			}
			set
			{
				if ((this._CensusMoveOutReason != value))
				{
					this.OnCensusMoveOutReasonChanging(value);
					this.SendPropertyChanging();
					this._CensusMoveOutReason = value;
					this.SendPropertyChanged("CensusMoveOutReason");
					this.OnCensusMoveOutReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarerStatus", DbType="VarChar(1)")]
		public string CarerStatus
		{
			get
			{
				return this._CarerStatus;
			}
			set
			{
				if ((this._CarerStatus != value))
				{
					this.OnCarerStatusChanging(value);
					this.SendPropertyChanging();
					this._CarerStatus = value;
					this.SendPropertyChanged("CarerStatus");
					this.OnCarerStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeUpdate
		{
			get
			{
				return this._DateTimeUpdate;
			}
			set
			{
				if ((this._DateTimeUpdate != value))
				{
					this.OnDateTimeUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateTimeUpdate = value;
					this.SendPropertyChanged("DateTimeUpdate");
					this.OnDateTimeUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavorItem")]
	public partial class FavorItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _FavorItemCode;
		
		private string _Name;
		
		private EntitySet<FavorList> _FavorLists;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavorItemCodeChanging(string value);
    partial void OnFavorItemCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public FavorItem()
		{
			this._FavorLists = new EntitySet<FavorList>(new Action<FavorList>(this.attach_FavorLists), new Action<FavorList>(this.detach_FavorLists));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavorItemCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FavorItemCode
		{
			get
			{
				return this._FavorItemCode;
			}
			set
			{
				if ((this._FavorItemCode != value))
				{
					this.OnFavorItemCodeChanging(value);
					this.SendPropertyChanging();
					this._FavorItemCode = value;
					this.SendPropertyChanged("FavorItemCode");
					this.OnFavorItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FavorItem_FavorList", Storage="_FavorLists", ThisKey="FavorItemCode", OtherKey="FavorItemCode")]
		public EntitySet<FavorList> FavorLists
		{
			get
			{
				return this._FavorLists;
			}
			set
			{
				this._FavorLists.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FavorLists(FavorList entity)
		{
			this.SendPropertyChanging();
			entity.FavorItem = this;
		}
		
		private void detach_FavorLists(FavorList entity)
		{
			this.SendPropertyChanging();
			entity.FavorItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavorList")]
	public partial class FavorList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _FavorItemCode;
		
		private string _FavorItemDescription;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<FavorItem> _FavorItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnFavorItemCodeChanging(string value);
    partial void OnFavorItemCodeChanged();
    partial void OnFavorItemDescriptionChanging(string value);
    partial void OnFavorItemDescriptionChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public FavorList()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._FavorItem = default(EntityRef<FavorItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavorItemCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string FavorItemCode
		{
			get
			{
				return this._FavorItemCode;
			}
			set
			{
				if ((this._FavorItemCode != value))
				{
					if (this._FavorItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFavorItemCodeChanging(value);
					this.SendPropertyChanging();
					this._FavorItemCode = value;
					this.SendPropertyChanged("FavorItemCode");
					this.OnFavorItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavorItemDescription", DbType="VarChar(50)")]
		public string FavorItemDescription
		{
			get
			{
				return this._FavorItemDescription;
			}
			set
			{
				if ((this._FavorItemDescription != value))
				{
					this.OnFavorItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FavorItemDescription = value;
					this.SendPropertyChanged("FavorItemDescription");
					this.OnFavorItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_FavorList", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.FavorLists.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.FavorLists.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FavorItem_FavorList", Storage="_FavorItem", ThisKey="FavorItemCode", OtherKey="FavorItemCode", IsForeignKey=true)]
		public FavorItem FavorItem
		{
			get
			{
				return this._FavorItem.Entity;
			}
			set
			{
				FavorItem previousValue = this._FavorItem.Entity;
				if (((previousValue != value) 
							|| (this._FavorItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FavorItem.Entity = null;
						previousValue.FavorLists.Remove(this);
					}
					this._FavorItem.Entity = value;
					if ((value != null))
					{
						value.FavorLists.Add(this);
						this._FavorItemCode = value.FavorItemCode;
					}
					else
					{
						this._FavorItemCode = default(string);
					}
					this.SendPropertyChanged("FavorItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FavorList_log")]
	public partial class FavorList_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _FavorItemCode;
		
		private string _FavorItemDescription;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnFavorItemCodeChanging(string value);
    partial void OnFavorItemCodeChanged();
    partial void OnFavorItemDescriptionChanging(string value);
    partial void OnFavorItemDescriptionChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public FavorList_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavorItemCode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FavorItemCode
		{
			get
			{
				return this._FavorItemCode;
			}
			set
			{
				if ((this._FavorItemCode != value))
				{
					this.OnFavorItemCodeChanging(value);
					this.SendPropertyChanging();
					this._FavorItemCode = value;
					this.SendPropertyChanged("FavorItemCode");
					this.OnFavorItemCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FavorItemDescription", DbType="VarChar(50)")]
		public string FavorItemDescription
		{
			get
			{
				return this._FavorItemDescription;
			}
			set
			{
				if ((this._FavorItemDescription != value))
				{
					this.OnFavorItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._FavorItemDescription = value;
					this.SendPropertyChanged("FavorItemDescription");
					this.OnFavorItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Foreigner")]
	public partial class Foreigner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ForeignTypeID;
		
		private string _ForeignTypeDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForeignTypeIDChanging(string value);
    partial void OnForeignTypeIDChanged();
    partial void OnForeignTypeDescriptionChanging(string value);
    partial void OnForeignTypeDescriptionChanged();
    #endregion
		
		public Foreigner()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForeignTypeID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ForeignTypeID
		{
			get
			{
				return this._ForeignTypeID;
			}
			set
			{
				if ((this._ForeignTypeID != value))
				{
					this.OnForeignTypeIDChanging(value);
					this.SendPropertyChanging();
					this._ForeignTypeID = value;
					this.SendPropertyChanged("ForeignTypeID");
					this.OnForeignTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForeignTypeDescription", DbType="VarChar(MAX)")]
		public string ForeignTypeDescription
		{
			get
			{
				return this._ForeignTypeDescription;
			}
			set
			{
				if ((this._ForeignTypeDescription != value))
				{
					this.OnForeignTypeDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ForeignTypeDescription = value;
					this.SendPropertyChanged("ForeignTypeDescription");
					this.OnForeignTypeDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GrowthEvaluation")]
	public partial class GrowthEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SACTCode;
		
		private string _SACTValue;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<SubActivity> _SubActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    partial void OnSACTValueChanging(string value);
    partial void OnSACTValueChanged();
    #endregion
		
		public GrowthEvaluation()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._SubActivity = default(EntityRef<SubActivity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					if (this._SubActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTValue", DbType="VarChar(1)")]
		public string SACTValue
		{
			get
			{
				return this._SACTValue;
			}
			set
			{
				if ((this._SACTValue != value))
				{
					this.OnSACTValueChanging(value);
					this.SendPropertyChanging();
					this._SACTValue = value;
					this.SendPropertyChanged("SACTValue");
					this.OnSACTValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_GrowthEvaluation", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.GrowthEvaluations.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.GrowthEvaluations.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubActivity_GrowthEvaluation", Storage="_SubActivity", ThisKey="SACTCode", OtherKey="SACTCode", IsForeignKey=true)]
		public SubActivity SubActivity
		{
			get
			{
				return this._SubActivity.Entity;
			}
			set
			{
				SubActivity previousValue = this._SubActivity.Entity;
				if (((previousValue != value) 
							|| (this._SubActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubActivity.Entity = null;
						previousValue.GrowthEvaluations.Remove(this);
					}
					this._SubActivity.Entity = value;
					if ((value != null))
					{
						value.GrowthEvaluations.Add(this);
						this._SACTCode = value.SACTCode;
					}
					else
					{
						this._SACTCode = default(string);
					}
					this.SendPropertyChanged("SubActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GrowthEvaluation2")]
	public partial class GrowthEvaluation2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SACT2Code;
		
		private string _SACTValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSACT2CodeChanging(string value);
    partial void OnSACT2CodeChanged();
    partial void OnSACTValueChanging(string value);
    partial void OnSACTValueChanged();
    #endregion
		
		public GrowthEvaluation2()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACT2Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACT2Code
		{
			get
			{
				return this._SACT2Code;
			}
			set
			{
				if ((this._SACT2Code != value))
				{
					this.OnSACT2CodeChanging(value);
					this.SendPropertyChanging();
					this._SACT2Code = value;
					this.SendPropertyChanged("SACT2Code");
					this.OnSACT2CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTValue", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACTValue
		{
			get
			{
				return this._SACTValue;
			}
			set
			{
				if ((this._SACTValue != value))
				{
					this.OnSACTValueChanging(value);
					this.SendPropertyChanging();
					this._SACTValue = value;
					this.SendPropertyChanged("SACTValue");
					this.OnSACTValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthEvaluation")]
	public partial class HealthEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _HealthEvalCode;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<HealthProblem> _HealthProblem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnHealthEvalCodeChanging(string value);
    partial void OnHealthEvalCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public HealthEvaluation()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._HealthProblem = default(EntityRef<HealthProblem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthEvalCode
		{
			get
			{
				return this._HealthEvalCode;
			}
			set
			{
				if ((this._HealthEvalCode != value))
				{
					if (this._HealthProblem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHealthEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._HealthEvalCode = value;
					this.SendPropertyChanged("HealthEvalCode");
					this.OnHealthEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_HealthEvaluation", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.HealthEvaluations.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.HealthEvaluations.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthProblem_HealthEvaluation", Storage="_HealthProblem", ThisKey="HealthEvalCode", OtherKey="HealthEvalCode", IsForeignKey=true)]
		public HealthProblem HealthProblem
		{
			get
			{
				return this._HealthProblem.Entity;
			}
			set
			{
				HealthProblem previousValue = this._HealthProblem.Entity;
				if (((previousValue != value) 
							|| (this._HealthProblem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HealthProblem.Entity = null;
						previousValue.HealthEvaluations.Remove(this);
					}
					this._HealthProblem.Entity = value;
					if ((value != null))
					{
						value.HealthEvaluations.Add(this);
						this._HealthEvalCode = value.HealthEvalCode;
					}
					else
					{
						this._HealthEvalCode = default(string);
					}
					this.SendPropertyChanged("HealthProblem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthEvaluation_log")]
	public partial class HealthEvaluation_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _HealthEvalCode;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnHealthEvalCodeChanging(string value);
    partial void OnHealthEvalCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public HealthEvaluation_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthEvalCode
		{
			get
			{
				return this._HealthEvalCode;
			}
			set
			{
				if ((this._HealthEvalCode != value))
				{
					this.OnHealthEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._HealthEvalCode = value;
					this.SendPropertyChanged("HealthEvalCode");
					this.OnHealthEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.healthinfo")]
	public partial class healthinfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _code;
		
		private string _Note;
		
		private System.Nullable<System.DateTime> _update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnupdateChanging(System.Nullable<System.DateTime> value);
    partial void OnupdateChanged();
    #endregion
		
		public healthinfo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[update]", Storage="_update", DbType="DateTime")]
		public System.Nullable<System.DateTime> update
		{
			get
			{
				return this._update;
			}
			set
			{
				if ((this._update != value))
				{
					this.OnupdateChanging(value);
					this.SendPropertyChanging();
					this._update = value;
					this.SendPropertyChanged("update");
					this.OnupdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.healthinfo_log")]
	public partial class healthinfo_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _code;
		
		private string _Note;
		
		private System.DateTime _update;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnupdateChanging(System.DateTime value);
    partial void OnupdateChanged();
    #endregion
		
		public healthinfo_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[update]", Storage="_update", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime update
		{
			get
			{
				return this._update;
			}
			set
			{
				if ((this._update != value))
				{
					this.OnupdateChanging(value);
					this.SendPropertyChanging();
					this._update = value;
					this.SendPropertyChanged("update");
					this.OnupdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HealthProblem")]
	public partial class HealthProblem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HealthEvalCode;
		
		private string _Name;
		
		private EntitySet<HealthEvaluation> _HealthEvaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHealthEvalCodeChanging(string value);
    partial void OnHealthEvalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public HealthProblem()
		{
			this._HealthEvaluations = new EntitySet<HealthEvaluation>(new Action<HealthEvaluation>(this.attach_HealthEvaluations), new Action<HealthEvaluation>(this.detach_HealthEvaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HealthEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HealthEvalCode
		{
			get
			{
				return this._HealthEvalCode;
			}
			set
			{
				if ((this._HealthEvalCode != value))
				{
					this.OnHealthEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._HealthEvalCode = value;
					this.SendPropertyChanged("HealthEvalCode");
					this.OnHealthEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HealthProblem_HealthEvaluation", Storage="_HealthEvaluations", ThisKey="HealthEvalCode", OtherKey="HealthEvalCode")]
		public EntitySet<HealthEvaluation> HealthEvaluations
		{
			get
			{
				return this._HealthEvaluations;
			}
			set
			{
				this._HealthEvaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HealthEvaluations(HealthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.HealthProblem = this;
		}
		
		private void detach_HealthEvaluations(HealthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.HealthProblem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HearEvaluation")]
	public partial class HearEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _HearEvalCode;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<HearProblem> _HearProblem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnHearEvalCodeChanging(string value);
    partial void OnHearEvalCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public HearEvaluation()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._HearProblem = default(EntityRef<HearProblem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HearEvalCode
		{
			get
			{
				return this._HearEvalCode;
			}
			set
			{
				if ((this._HearEvalCode != value))
				{
					if (this._HearProblem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHearEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._HearEvalCode = value;
					this.SendPropertyChanged("HearEvalCode");
					this.OnHearEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_HearEvaluation", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.HearEvaluations.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.HearEvaluations.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HearProblem_HearEvaluation", Storage="_HearProblem", ThisKey="HearEvalCode", OtherKey="HearEvalCode", IsForeignKey=true)]
		public HearProblem HearProblem
		{
			get
			{
				return this._HearProblem.Entity;
			}
			set
			{
				HearProblem previousValue = this._HearProblem.Entity;
				if (((previousValue != value) 
							|| (this._HearProblem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HearProblem.Entity = null;
						previousValue.HearEvaluations.Remove(this);
					}
					this._HearProblem.Entity = value;
					if ((value != null))
					{
						value.HearEvaluations.Add(this);
						this._HearEvalCode = value.HearEvalCode;
					}
					else
					{
						this._HearEvalCode = default(string);
					}
					this.SendPropertyChanged("HearProblem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HearEvaluation_log")]
	public partial class HearEvaluation_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _HearEvalCode;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnHearEvalCodeChanging(string value);
    partial void OnHearEvalCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public HearEvaluation_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HearEvalCode
		{
			get
			{
				return this._HearEvalCode;
			}
			set
			{
				if ((this._HearEvalCode != value))
				{
					this.OnHearEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._HearEvalCode = value;
					this.SendPropertyChanged("HearEvalCode");
					this.OnHearEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HearProblem")]
	public partial class HearProblem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HearEvalCode;
		
		private string _Name;
		
		private EntitySet<HearEvaluation> _HearEvaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHearEvalCodeChanging(string value);
    partial void OnHearEvalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public HearProblem()
		{
			this._HearEvaluations = new EntitySet<HearEvaluation>(new Action<HearEvaluation>(this.attach_HearEvaluations), new Action<HearEvaluation>(this.detach_HearEvaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HearEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HearEvalCode
		{
			get
			{
				return this._HearEvalCode;
			}
			set
			{
				if ((this._HearEvalCode != value))
				{
					this.OnHearEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._HearEvalCode = value;
					this.SendPropertyChanged("HearEvalCode");
					this.OnHearEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HearProblem_HearEvaluation", Storage="_HearEvaluations", ThisKey="HearEvalCode", OtherKey="HearEvalCode")]
		public EntitySet<HearEvaluation> HearEvaluations
		{
			get
			{
				return this._HearEvaluations;
			}
			set
			{
				this._HearEvaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_HearEvaluations(HearEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.HearProblem = this;
		}
		
		private void detach_HearEvaluations(HearEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.HearProblem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[HL7 Gender Standard]")]
	public partial class HL7_Gender_Standard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _GenderCode;
		
		private string _GenderThaiDescription;
		
		private string _GenderEnglishDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGenderCodeChanging(string value);
    partial void OnGenderCodeChanged();
    partial void OnGenderThaiDescriptionChanging(string value);
    partial void OnGenderThaiDescriptionChanged();
    partial void OnGenderEnglishDescriptionChanging(string value);
    partial void OnGenderEnglishDescriptionChanged();
    #endregion
		
		public HL7_Gender_Standard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string GenderCode
		{
			get
			{
				return this._GenderCode;
			}
			set
			{
				if ((this._GenderCode != value))
				{
					this.OnGenderCodeChanging(value);
					this.SendPropertyChanging();
					this._GenderCode = value;
					this.SendPropertyChanged("GenderCode");
					this.OnGenderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderThaiDescription", DbType="VarChar(MAX)")]
		public string GenderThaiDescription
		{
			get
			{
				return this._GenderThaiDescription;
			}
			set
			{
				if ((this._GenderThaiDescription != value))
				{
					this.OnGenderThaiDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GenderThaiDescription = value;
					this.SendPropertyChanged("GenderThaiDescription");
					this.OnGenderThaiDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderEnglishDescription", DbType="VarChar(MAX)")]
		public string GenderEnglishDescription
		{
			get
			{
				return this._GenderEnglishDescription;
			}
			set
			{
				if ((this._GenderEnglishDescription != value))
				{
					this.OnGenderEnglishDescriptionChanging(value);
					this.SendPropertyChanging();
					this._GenderEnglishDescription = value;
					this.SendPropertyChanged("GenderEnglishDescription");
					this.OnGenderEnglishDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Host")]
	public partial class Host : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _HostID;
		
		private string _HostName;
		
		private string _HostStreetAddress;
		
		private string _HostStreetName;
		
		private string _HostCity;
		
		private string _HostProvince;
		
		private string _HostPostcode;
		
		private string _ProviderCode;
		
		private EntityRef<Provider> _Provider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHostIDChanging(string value);
    partial void OnHostIDChanged();
    partial void OnHostNameChanging(string value);
    partial void OnHostNameChanged();
    partial void OnHostStreetAddressChanging(string value);
    partial void OnHostStreetAddressChanged();
    partial void OnHostStreetNameChanging(string value);
    partial void OnHostStreetNameChanged();
    partial void OnHostCityChanging(string value);
    partial void OnHostCityChanged();
    partial void OnHostProvinceChanging(string value);
    partial void OnHostProvinceChanged();
    partial void OnHostPostcodeChanging(string value);
    partial void OnHostPostcodeChanged();
    partial void OnProviderCodeChanging(string value);
    partial void OnProviderCodeChanged();
    #endregion
		
		public Host()
		{
			this._Provider = default(EntityRef<Provider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string HostID
		{
			get
			{
				return this._HostID;
			}
			set
			{
				if ((this._HostID != value))
				{
					this.OnHostIDChanging(value);
					this.SendPropertyChanging();
					this._HostID = value;
					this.SendPropertyChanged("HostID");
					this.OnHostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostName", DbType="VarChar(50)")]
		public string HostName
		{
			get
			{
				return this._HostName;
			}
			set
			{
				if ((this._HostName != value))
				{
					this.OnHostNameChanging(value);
					this.SendPropertyChanging();
					this._HostName = value;
					this.SendPropertyChanged("HostName");
					this.OnHostNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostStreetAddress", DbType="VarChar(50)")]
		public string HostStreetAddress
		{
			get
			{
				return this._HostStreetAddress;
			}
			set
			{
				if ((this._HostStreetAddress != value))
				{
					this.OnHostStreetAddressChanging(value);
					this.SendPropertyChanging();
					this._HostStreetAddress = value;
					this.SendPropertyChanged("HostStreetAddress");
					this.OnHostStreetAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostStreetName", DbType="VarChar(50)")]
		public string HostStreetName
		{
			get
			{
				return this._HostStreetName;
			}
			set
			{
				if ((this._HostStreetName != value))
				{
					this.OnHostStreetNameChanging(value);
					this.SendPropertyChanging();
					this._HostStreetName = value;
					this.SendPropertyChanged("HostStreetName");
					this.OnHostStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostCity", DbType="VarChar(50)")]
		public string HostCity
		{
			get
			{
				return this._HostCity;
			}
			set
			{
				if ((this._HostCity != value))
				{
					this.OnHostCityChanging(value);
					this.SendPropertyChanging();
					this._HostCity = value;
					this.SendPropertyChanged("HostCity");
					this.OnHostCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostProvince", DbType="VarChar(50)")]
		public string HostProvince
		{
			get
			{
				return this._HostProvince;
			}
			set
			{
				if ((this._HostProvince != value))
				{
					this.OnHostProvinceChanging(value);
					this.SendPropertyChanging();
					this._HostProvince = value;
					this.SendPropertyChanged("HostProvince");
					this.OnHostProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostPostcode", DbType="VarChar(50)")]
		public string HostPostcode
		{
			get
			{
				return this._HostPostcode;
			}
			set
			{
				if ((this._HostPostcode != value))
				{
					this.OnHostPostcodeChanging(value);
					this.SendPropertyChanging();
					this._HostPostcode = value;
					this.SendPropertyChanged("HostPostcode");
					this.OnHostPostcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderCode", DbType="VarChar(50)")]
		public string ProviderCode
		{
			get
			{
				return this._ProviderCode;
			}
			set
			{
				if ((this._ProviderCode != value))
				{
					if (this._Provider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProviderCodeChanging(value);
					this.SendPropertyChanging();
					this._ProviderCode = value;
					this.SendPropertyChanged("ProviderCode");
					this.OnProviderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_Host", Storage="_Provider", ThisKey="ProviderCode", OtherKey="ProviderCode", IsForeignKey=true)]
		public Provider Provider
		{
			get
			{
				return this._Provider.Entity;
			}
			set
			{
				Provider previousValue = this._Provider.Entity;
				if (((previousValue != value) 
							|| (this._Provider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Provider.Entity = null;
						previousValue.Hosts.Remove(this);
					}
					this._Provider.Entity = value;
					if ((value != null))
					{
						value.Hosts.Add(this);
						this._ProviderCode = value.ProviderCode;
					}
					else
					{
						this._ProviderCode = default(string);
					}
					this.SendPropertyChanged("Provider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceCard")]
	public partial class InsuranceCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _dec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OndecChanging(string value);
    partial void OndecChanged();
    #endregion
		
		public InsuranceCard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dec", DbType="VarChar(MAX)")]
		public string dec
		{
			get
			{
				return this._dec;
			}
			set
			{
				if ((this._dec != value))
				{
					this.OndecChanging(value);
					this.SendPropertyChanging();
					this._dec = value;
					this.SendPropertyChanged("dec");
					this.OndecChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LiveHomeStatus")]
	public partial class LiveHomeStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LiveHomeStatusID;
		
		private string _LiveHomeStatusDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLiveHomeStatusIDChanging(string value);
    partial void OnLiveHomeStatusIDChanged();
    partial void OnLiveHomeStatusDescriptionChanging(string value);
    partial void OnLiveHomeStatusDescriptionChanged();
    #endregion
		
		public LiveHomeStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveHomeStatusID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LiveHomeStatusID
		{
			get
			{
				return this._LiveHomeStatusID;
			}
			set
			{
				if ((this._LiveHomeStatusID != value))
				{
					this.OnLiveHomeStatusIDChanging(value);
					this.SendPropertyChanging();
					this._LiveHomeStatusID = value;
					this.SendPropertyChanged("LiveHomeStatusID");
					this.OnLiveHomeStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveHomeStatusDescription", DbType="VarChar(MAX)")]
		public string LiveHomeStatusDescription
		{
			get
			{
				return this._LiveHomeStatusDescription;
			}
			set
			{
				if ((this._LiveHomeStatusDescription != value))
				{
					this.OnLiveHomeStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LiveHomeStatusDescription = value;
					this.SendPropertyChanged("LiveHomeStatusDescription");
					this.OnLiveHomeStatusDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LiveStatus")]
	public partial class LiveStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LiveStatusID;
		
		private string _LiveStatusDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLiveStatusIDChanging(string value);
    partial void OnLiveStatusIDChanged();
    partial void OnLiveStatusDescriptionChanging(string value);
    partial void OnLiveStatusDescriptionChanged();
    #endregion
		
		public LiveStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveStatusID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LiveStatusID
		{
			get
			{
				return this._LiveStatusID;
			}
			set
			{
				if ((this._LiveStatusID != value))
				{
					this.OnLiveStatusIDChanging(value);
					this.SendPropertyChanging();
					this._LiveStatusID = value;
					this.SendPropertyChanged("LiveStatusID");
					this.OnLiveStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveStatusDescription", DbType="VarChar(MAX)")]
		public string LiveStatusDescription
		{
			get
			{
				return this._LiveStatusDescription;
			}
			set
			{
				if ((this._LiveStatusDescription != value))
				{
					this.OnLiveStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._LiveStatusDescription = value;
					this.SendPropertyChanged("LiveStatusDescription");
					this.OnLiveStatusDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MariageStatus")]
	public partial class MariageStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MariageStatusID;
		
		private string _MariageStatusDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMariageStatusIDChanging(string value);
    partial void OnMariageStatusIDChanged();
    partial void OnMariageStatusDescriptionChanging(string value);
    partial void OnMariageStatusDescriptionChanged();
    #endregion
		
		public MariageStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MariageStatusID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MariageStatusID
		{
			get
			{
				return this._MariageStatusID;
			}
			set
			{
				if ((this._MariageStatusID != value))
				{
					this.OnMariageStatusIDChanging(value);
					this.SendPropertyChanging();
					this._MariageStatusID = value;
					this.SendPropertyChanged("MariageStatusID");
					this.OnMariageStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MariageStatusDescription", DbType="VarChar(MAX)")]
		public string MariageStatusDescription
		{
			get
			{
				return this._MariageStatusDescription;
			}
			set
			{
				if ((this._MariageStatusDescription != value))
				{
					this.OnMariageStatusDescriptionChanging(value);
					this.SendPropertyChanging();
					this._MariageStatusDescription = value;
					this.SendPropertyChanged("MariageStatusDescription");
					this.OnMariageStatusDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Material")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaterialCode;
		
		private string _MaterialDesc;
		
		private System.Nullable<int> _Unit;
		
		private string _EstimatedPrice;
		
		private string _RealPrice;
		
		private string _SVCCode;
		
		private string _Note;
		
		private EntitySet<Tool> _Tools;
		
		private EntitySet<UsedMaterial> _UsedMaterials;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnMaterialDescChanging(string value);
    partial void OnMaterialDescChanged();
    partial void OnUnitChanging(System.Nullable<int> value);
    partial void OnUnitChanged();
    partial void OnEstimatedPriceChanging(string value);
    partial void OnEstimatedPriceChanged();
    partial void OnRealPriceChanging(string value);
    partial void OnRealPriceChanged();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Material()
		{
			this._Tools = new EntitySet<Tool>(new Action<Tool>(this.attach_Tools), new Action<Tool>(this.detach_Tools));
			this._UsedMaterials = new EntitySet<UsedMaterial>(new Action<UsedMaterial>(this.attach_UsedMaterials), new Action<UsedMaterial>(this.detach_UsedMaterials));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialDesc", DbType="VarChar(500)")]
		public string MaterialDesc
		{
			get
			{
				return this._MaterialDesc;
			}
			set
			{
				if ((this._MaterialDesc != value))
				{
					this.OnMaterialDescChanging(value);
					this.SendPropertyChanging();
					this._MaterialDesc = value;
					this.SendPropertyChanged("MaterialDesc");
					this.OnMaterialDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Unit", DbType="Int")]
		public System.Nullable<int> Unit
		{
			get
			{
				return this._Unit;
			}
			set
			{
				if ((this._Unit != value))
				{
					this.OnUnitChanging(value);
					this.SendPropertyChanging();
					this._Unit = value;
					this.SendPropertyChanged("Unit");
					this.OnUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimatedPrice", DbType="VarChar(500)")]
		public string EstimatedPrice
		{
			get
			{
				return this._EstimatedPrice;
			}
			set
			{
				if ((this._EstimatedPrice != value))
				{
					this.OnEstimatedPriceChanging(value);
					this.SendPropertyChanging();
					this._EstimatedPrice = value;
					this.SendPropertyChanged("EstimatedPrice");
					this.OnEstimatedPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealPrice", DbType="VarChar(500)")]
		public string RealPrice
		{
			get
			{
				return this._RealPrice;
			}
			set
			{
				if ((this._RealPrice != value))
				{
					this.OnRealPriceChanging(value);
					this.SendPropertyChanging();
					this._RealPrice = value;
					this.SendPropertyChanged("RealPrice");
					this.OnRealPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="VarChar(500)")]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(500)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Tool", Storage="_Tools", ThisKey="MaterialCode", OtherKey="ToolCode")]
		public EntitySet<Tool> Tools
		{
			get
			{
				return this._Tools;
			}
			set
			{
				this._Tools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_UsedMaterial", Storage="_UsedMaterials", ThisKey="MaterialCode", OtherKey="MaterialCode")]
		public EntitySet<UsedMaterial> UsedMaterials
		{
			get
			{
				return this._UsedMaterials;
			}
			set
			{
				this._UsedMaterials.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_UsedMaterials(UsedMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_UsedMaterials(UsedMaterial entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Material_DisableType")]
	public partial class Material_DisableType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MaterialCode;
		
		private string _DisabilityType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnDisabilityTypeChanging(string value);
    partial void OnDisabilityTypeChanged();
    #endregion
		
		public Material_DisableType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityType", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DisabilityType
		{
			get
			{
				return this._DisabilityType;
			}
			set
			{
				if ((this._DisabilityType != value))
				{
					this.OnDisabilityTypeChanging(value);
					this.SendPropertyChanging();
					this._DisabilityType = value;
					this.SendPropertyChanged("DisabilityType");
					this.OnDisabilityTypeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Material_skillType")]
	public partial class Material_skillType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ACTCode;
		
		private string _MaterialCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    #endregion
		
		public Material_skillType()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ministry")]
	public partial class Ministry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MinistryCode;
		
		private string _MinistryName;
		
		private EntitySet<Organization> _Organizations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMinistryCodeChanging(string value);
    partial void OnMinistryCodeChanged();
    partial void OnMinistryNameChanging(string value);
    partial void OnMinistryNameChanged();
    #endregion
		
		public Ministry()
		{
			this._Organizations = new EntitySet<Organization>(new Action<Organization>(this.attach_Organizations), new Action<Organization>(this.detach_Organizations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinistryCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MinistryCode
		{
			get
			{
				return this._MinistryCode;
			}
			set
			{
				if ((this._MinistryCode != value))
				{
					this.OnMinistryCodeChanging(value);
					this.SendPropertyChanging();
					this._MinistryCode = value;
					this.SendPropertyChanged("MinistryCode");
					this.OnMinistryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinistryName", DbType="VarChar(50)")]
		public string MinistryName
		{
			get
			{
				return this._MinistryName;
			}
			set
			{
				if ((this._MinistryName != value))
				{
					this.OnMinistryNameChanging(value);
					this.SendPropertyChanging();
					this._MinistryName = value;
					this.SendPropertyChanged("MinistryName");
					this.OnMinistryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ministry_Organization", Storage="_Organizations", ThisKey="MinistryCode", OtherKey="MinistryCode")]
		public EntitySet<Organization> Organizations
		{
			get
			{
				return this._Organizations;
			}
			set
			{
				this._Organizations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Ministry = this;
		}
		
		private void detach_Organizations(Organization entity)
		{
			this.SendPropertyChanging();
			entity.Ministry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Occupation")]
	public partial class Occupation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OccupationID;
		
		private string _OccupationDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOccupationIDChanging(string value);
    partial void OnOccupationIDChanged();
    partial void OnOccupationDescriptionChanging(string value);
    partial void OnOccupationDescriptionChanged();
    #endregion
		
		public Occupation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OccupationID
		{
			get
			{
				return this._OccupationID;
			}
			set
			{
				if ((this._OccupationID != value))
				{
					this.OnOccupationIDChanging(value);
					this.SendPropertyChanging();
					this._OccupationID = value;
					this.SendPropertyChanged("OccupationID");
					this.OnOccupationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OccupationDescription", DbType="VarChar(MAX)")]
		public string OccupationDescription
		{
			get
			{
				return this._OccupationDescription;
			}
			set
			{
				if ((this._OccupationDescription != value))
				{
					this.OnOccupationDescriptionChanging(value);
					this.SendPropertyChanging();
					this._OccupationDescription = value;
					this.SendPropertyChanged("OccupationDescription");
					this.OnOccupationDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Organization")]
	public partial class Organization : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _OrgCode;
		
		private string _OrgName;
		
		private string _MinistryCode;
		
		private EntitySet<Provider> _Providers;
		
		private EntityRef<Ministry> _Ministry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrgCodeChanging(string value);
    partial void OnOrgCodeChanged();
    partial void OnOrgNameChanging(string value);
    partial void OnOrgNameChanged();
    partial void OnMinistryCodeChanging(string value);
    partial void OnMinistryCodeChanged();
    #endregion
		
		public Organization()
		{
			this._Providers = new EntitySet<Provider>(new Action<Provider>(this.attach_Providers), new Action<Provider>(this.detach_Providers));
			this._Ministry = default(EntityRef<Ministry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string OrgCode
		{
			get
			{
				return this._OrgCode;
			}
			set
			{
				if ((this._OrgCode != value))
				{
					this.OnOrgCodeChanging(value);
					this.SendPropertyChanging();
					this._OrgCode = value;
					this.SendPropertyChanged("OrgCode");
					this.OnOrgCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgName", DbType="VarChar(50)")]
		public string OrgName
		{
			get
			{
				return this._OrgName;
			}
			set
			{
				if ((this._OrgName != value))
				{
					this.OnOrgNameChanging(value);
					this.SendPropertyChanging();
					this._OrgName = value;
					this.SendPropertyChanged("OrgName");
					this.OnOrgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinistryCode", DbType="VarChar(50)")]
		public string MinistryCode
		{
			get
			{
				return this._MinistryCode;
			}
			set
			{
				if ((this._MinistryCode != value))
				{
					if (this._Ministry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMinistryCodeChanging(value);
					this.SendPropertyChanging();
					this._MinistryCode = value;
					this.SendPropertyChanged("MinistryCode");
					this.OnMinistryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Provider", Storage="_Providers", ThisKey="OrgCode", OtherKey="OrgCode")]
		public EntitySet<Provider> Providers
		{
			get
			{
				return this._Providers;
			}
			set
			{
				this._Providers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ministry_Organization", Storage="_Ministry", ThisKey="MinistryCode", OtherKey="MinistryCode", IsForeignKey=true)]
		public Ministry Ministry
		{
			get
			{
				return this._Ministry.Entity;
			}
			set
			{
				Ministry previousValue = this._Ministry.Entity;
				if (((previousValue != value) 
							|| (this._Ministry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ministry.Entity = null;
						previousValue.Organizations.Remove(this);
					}
					this._Ministry.Entity = value;
					if ((value != null))
					{
						value.Organizations.Add(this);
						this._MinistryCode = value.MinistryCode;
					}
					else
					{
						this._MinistryCode = default(string);
					}
					this.SendPropertyChanged("Ministry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Organization = this;
		}
		
		private void detach_Providers(Provider entity)
		{
			this.SendPropertyChanging();
			entity.Organization = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private string _Title;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Gender;
		
		private string _BloodType;
		
		private string _Nation;
		
		private string _Race;
		
		private string _Religion;
		
		private string _Foreigner;
		
		private string _LiveHomeStatus;
		
		private string _LiveHouseNumber;
		
		private string _LiveMooNumber;
		
		private string _LiveVillageName;
		
		private string _LiveAlley;
		
		private string _LiveStreetName;
		
		private string _LiveTumbon;
		
		private string _LiveCity;
		
		private string _LiveProvince;
		
		private string _LivePostCode;
		
		private System.Nullable<System.DateTime> _LiveMoveInDate;
		
		private System.Nullable<System.DateTime> _LiveMoveOutDate;
		
		private string _LiveMoveOutReason;
		
		private string _CensusHouseNumber;
		
		private string _CensusMooNumber;
		
		private string _CensusVillageName;
		
		private string _CensusAlley;
		
		private string _CensusStreetName;
		
		private string _CensusTumbon;
		
		private string _CensusCity;
		
		private string _CensusProvince;
		
		private string _CensusPostCode;
		
		private System.Nullable<System.DateTime> _CensusMoveInDate;
		
		private System.Nullable<System.DateTime> _CensusMoveOutDate;
		
		private string _CensusMoveOutReason;
		
		private string _HomePhone;
		
		private string _Mobile;
		
		private string _RecordedStaffID;
		
		private System.Nullable<System.DateTime> _DateTimeUpdate;
		
		private string _DisabilityType;
		
		private string _Host;
		
		private string _Child_Pic;
		
		private string _Child_PicCID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnBloodTypeChanging(string value);
    partial void OnBloodTypeChanged();
    partial void OnNationChanging(string value);
    partial void OnNationChanged();
    partial void OnRaceChanging(string value);
    partial void OnRaceChanged();
    partial void OnReligionChanging(string value);
    partial void OnReligionChanged();
    partial void OnForeignerChanging(string value);
    partial void OnForeignerChanged();
    partial void OnLiveHomeStatusChanging(string value);
    partial void OnLiveHomeStatusChanged();
    partial void OnLiveHouseNumberChanging(string value);
    partial void OnLiveHouseNumberChanged();
    partial void OnLiveMooNumberChanging(string value);
    partial void OnLiveMooNumberChanged();
    partial void OnLiveVillageNameChanging(string value);
    partial void OnLiveVillageNameChanged();
    partial void OnLiveAlleyChanging(string value);
    partial void OnLiveAlleyChanged();
    partial void OnLiveStreetNameChanging(string value);
    partial void OnLiveStreetNameChanged();
    partial void OnLiveTumbonChanging(string value);
    partial void OnLiveTumbonChanged();
    partial void OnLiveCityChanging(string value);
    partial void OnLiveCityChanged();
    partial void OnLiveProvinceChanging(string value);
    partial void OnLiveProvinceChanged();
    partial void OnLivePostCodeChanging(string value);
    partial void OnLivePostCodeChanged();
    partial void OnLiveMoveInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLiveMoveInDateChanged();
    partial void OnLiveMoveOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLiveMoveOutDateChanged();
    partial void OnLiveMoveOutReasonChanging(string value);
    partial void OnLiveMoveOutReasonChanged();
    partial void OnCensusHouseNumberChanging(string value);
    partial void OnCensusHouseNumberChanged();
    partial void OnCensusMooNumberChanging(string value);
    partial void OnCensusMooNumberChanged();
    partial void OnCensusVillageNameChanging(string value);
    partial void OnCensusVillageNameChanged();
    partial void OnCensusAlleyChanging(string value);
    partial void OnCensusAlleyChanged();
    partial void OnCensusStreetNameChanging(string value);
    partial void OnCensusStreetNameChanged();
    partial void OnCensusTumbonChanging(string value);
    partial void OnCensusTumbonChanged();
    partial void OnCensusCityChanging(string value);
    partial void OnCensusCityChanged();
    partial void OnCensusProvinceChanging(string value);
    partial void OnCensusProvinceChanged();
    partial void OnCensusPostCodeChanging(string value);
    partial void OnCensusPostCodeChanged();
    partial void OnCensusMoveInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCensusMoveInDateChanged();
    partial void OnCensusMoveOutDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCensusMoveOutDateChanged();
    partial void OnCensusMoveOutReasonChanging(string value);
    partial void OnCensusMoveOutReasonChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnRecordedStaffIDChanging(string value);
    partial void OnRecordedStaffIDChanged();
    partial void OnDateTimeUpdateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeUpdateChanged();
    partial void OnDisabilityTypeChanging(string value);
    partial void OnDisabilityTypeChanged();
    partial void OnHostChanging(string value);
    partial void OnHostChanged();
    partial void OnChild_PicChanging(string value);
    partial void OnChild_PicChanged();
    partial void OnChild_PicCIDChanging(string value);
    partial void OnChild_PicCIDChanged();
    #endregion
		
		public Person()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(MAX)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(MAX)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BloodType", DbType="VarChar(MAX)")]
		public string BloodType
		{
			get
			{
				return this._BloodType;
			}
			set
			{
				if ((this._BloodType != value))
				{
					this.OnBloodTypeChanging(value);
					this.SendPropertyChanging();
					this._BloodType = value;
					this.SendPropertyChanged("BloodType");
					this.OnBloodTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nation", DbType="VarChar(MAX)")]
		public string Nation
		{
			get
			{
				return this._Nation;
			}
			set
			{
				if ((this._Nation != value))
				{
					this.OnNationChanging(value);
					this.SendPropertyChanging();
					this._Nation = value;
					this.SendPropertyChanged("Nation");
					this.OnNationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Race", DbType="VarChar(MAX)")]
		public string Race
		{
			get
			{
				return this._Race;
			}
			set
			{
				if ((this._Race != value))
				{
					this.OnRaceChanging(value);
					this.SendPropertyChanging();
					this._Race = value;
					this.SendPropertyChanged("Race");
					this.OnRaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Religion", DbType="VarChar(MAX)")]
		public string Religion
		{
			get
			{
				return this._Religion;
			}
			set
			{
				if ((this._Religion != value))
				{
					this.OnReligionChanging(value);
					this.SendPropertyChanging();
					this._Religion = value;
					this.SendPropertyChanged("Religion");
					this.OnReligionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foreigner", DbType="VarChar(MAX)")]
		public string Foreigner
		{
			get
			{
				return this._Foreigner;
			}
			set
			{
				if ((this._Foreigner != value))
				{
					this.OnForeignerChanging(value);
					this.SendPropertyChanging();
					this._Foreigner = value;
					this.SendPropertyChanged("Foreigner");
					this.OnForeignerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveHomeStatus", DbType="VarChar(MAX)")]
		public string LiveHomeStatus
		{
			get
			{
				return this._LiveHomeStatus;
			}
			set
			{
				if ((this._LiveHomeStatus != value))
				{
					this.OnLiveHomeStatusChanging(value);
					this.SendPropertyChanging();
					this._LiveHomeStatus = value;
					this.SendPropertyChanged("LiveHomeStatus");
					this.OnLiveHomeStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveHouseNumber", DbType="VarChar(MAX)")]
		public string LiveHouseNumber
		{
			get
			{
				return this._LiveHouseNumber;
			}
			set
			{
				if ((this._LiveHouseNumber != value))
				{
					this.OnLiveHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._LiveHouseNumber = value;
					this.SendPropertyChanged("LiveHouseNumber");
					this.OnLiveHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMooNumber", DbType="VarChar(MAX)")]
		public string LiveMooNumber
		{
			get
			{
				return this._LiveMooNumber;
			}
			set
			{
				if ((this._LiveMooNumber != value))
				{
					this.OnLiveMooNumberChanging(value);
					this.SendPropertyChanging();
					this._LiveMooNumber = value;
					this.SendPropertyChanged("LiveMooNumber");
					this.OnLiveMooNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveVillageName", DbType="VarChar(MAX)")]
		public string LiveVillageName
		{
			get
			{
				return this._LiveVillageName;
			}
			set
			{
				if ((this._LiveVillageName != value))
				{
					this.OnLiveVillageNameChanging(value);
					this.SendPropertyChanging();
					this._LiveVillageName = value;
					this.SendPropertyChanged("LiveVillageName");
					this.OnLiveVillageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveAlley", DbType="VarChar(MAX)")]
		public string LiveAlley
		{
			get
			{
				return this._LiveAlley;
			}
			set
			{
				if ((this._LiveAlley != value))
				{
					this.OnLiveAlleyChanging(value);
					this.SendPropertyChanging();
					this._LiveAlley = value;
					this.SendPropertyChanged("LiveAlley");
					this.OnLiveAlleyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveStreetName", DbType="VarChar(MAX)")]
		public string LiveStreetName
		{
			get
			{
				return this._LiveStreetName;
			}
			set
			{
				if ((this._LiveStreetName != value))
				{
					this.OnLiveStreetNameChanging(value);
					this.SendPropertyChanging();
					this._LiveStreetName = value;
					this.SendPropertyChanged("LiveStreetName");
					this.OnLiveStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveTumbon", DbType="VarChar(MAX)")]
		public string LiveTumbon
		{
			get
			{
				return this._LiveTumbon;
			}
			set
			{
				if ((this._LiveTumbon != value))
				{
					this.OnLiveTumbonChanging(value);
					this.SendPropertyChanging();
					this._LiveTumbon = value;
					this.SendPropertyChanged("LiveTumbon");
					this.OnLiveTumbonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveCity", DbType="VarChar(MAX)")]
		public string LiveCity
		{
			get
			{
				return this._LiveCity;
			}
			set
			{
				if ((this._LiveCity != value))
				{
					this.OnLiveCityChanging(value);
					this.SendPropertyChanging();
					this._LiveCity = value;
					this.SendPropertyChanged("LiveCity");
					this.OnLiveCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveProvince", DbType="VarChar(MAX)")]
		public string LiveProvince
		{
			get
			{
				return this._LiveProvince;
			}
			set
			{
				if ((this._LiveProvince != value))
				{
					this.OnLiveProvinceChanging(value);
					this.SendPropertyChanging();
					this._LiveProvince = value;
					this.SendPropertyChanged("LiveProvince");
					this.OnLiveProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LivePostCode", DbType="VarChar(MAX)")]
		public string LivePostCode
		{
			get
			{
				return this._LivePostCode;
			}
			set
			{
				if ((this._LivePostCode != value))
				{
					this.OnLivePostCodeChanging(value);
					this.SendPropertyChanging();
					this._LivePostCode = value;
					this.SendPropertyChanged("LivePostCode");
					this.OnLivePostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMoveInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LiveMoveInDate
		{
			get
			{
				return this._LiveMoveInDate;
			}
			set
			{
				if ((this._LiveMoveInDate != value))
				{
					this.OnLiveMoveInDateChanging(value);
					this.SendPropertyChanging();
					this._LiveMoveInDate = value;
					this.SendPropertyChanged("LiveMoveInDate");
					this.OnLiveMoveInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMoveOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LiveMoveOutDate
		{
			get
			{
				return this._LiveMoveOutDate;
			}
			set
			{
				if ((this._LiveMoveOutDate != value))
				{
					this.OnLiveMoveOutDateChanging(value);
					this.SendPropertyChanging();
					this._LiveMoveOutDate = value;
					this.SendPropertyChanged("LiveMoveOutDate");
					this.OnLiveMoveOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveMoveOutReason", DbType="VarChar(MAX)")]
		public string LiveMoveOutReason
		{
			get
			{
				return this._LiveMoveOutReason;
			}
			set
			{
				if ((this._LiveMoveOutReason != value))
				{
					this.OnLiveMoveOutReasonChanging(value);
					this.SendPropertyChanging();
					this._LiveMoveOutReason = value;
					this.SendPropertyChanged("LiveMoveOutReason");
					this.OnLiveMoveOutReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusHouseNumber", DbType="VarChar(MAX)")]
		public string CensusHouseNumber
		{
			get
			{
				return this._CensusHouseNumber;
			}
			set
			{
				if ((this._CensusHouseNumber != value))
				{
					this.OnCensusHouseNumberChanging(value);
					this.SendPropertyChanging();
					this._CensusHouseNumber = value;
					this.SendPropertyChanged("CensusHouseNumber");
					this.OnCensusHouseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMooNumber", DbType="VarChar(MAX)")]
		public string CensusMooNumber
		{
			get
			{
				return this._CensusMooNumber;
			}
			set
			{
				if ((this._CensusMooNumber != value))
				{
					this.OnCensusMooNumberChanging(value);
					this.SendPropertyChanging();
					this._CensusMooNumber = value;
					this.SendPropertyChanged("CensusMooNumber");
					this.OnCensusMooNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusVillageName", DbType="VarChar(MAX)")]
		public string CensusVillageName
		{
			get
			{
				return this._CensusVillageName;
			}
			set
			{
				if ((this._CensusVillageName != value))
				{
					this.OnCensusVillageNameChanging(value);
					this.SendPropertyChanging();
					this._CensusVillageName = value;
					this.SendPropertyChanged("CensusVillageName");
					this.OnCensusVillageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusAlley", DbType="VarChar(MAX)")]
		public string CensusAlley
		{
			get
			{
				return this._CensusAlley;
			}
			set
			{
				if ((this._CensusAlley != value))
				{
					this.OnCensusAlleyChanging(value);
					this.SendPropertyChanging();
					this._CensusAlley = value;
					this.SendPropertyChanged("CensusAlley");
					this.OnCensusAlleyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusStreetName", DbType="VarChar(MAX)")]
		public string CensusStreetName
		{
			get
			{
				return this._CensusStreetName;
			}
			set
			{
				if ((this._CensusStreetName != value))
				{
					this.OnCensusStreetNameChanging(value);
					this.SendPropertyChanging();
					this._CensusStreetName = value;
					this.SendPropertyChanged("CensusStreetName");
					this.OnCensusStreetNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusTumbon", DbType="VarChar(MAX)")]
		public string CensusTumbon
		{
			get
			{
				return this._CensusTumbon;
			}
			set
			{
				if ((this._CensusTumbon != value))
				{
					this.OnCensusTumbonChanging(value);
					this.SendPropertyChanging();
					this._CensusTumbon = value;
					this.SendPropertyChanged("CensusTumbon");
					this.OnCensusTumbonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusCity", DbType="VarChar(MAX)")]
		public string CensusCity
		{
			get
			{
				return this._CensusCity;
			}
			set
			{
				if ((this._CensusCity != value))
				{
					this.OnCensusCityChanging(value);
					this.SendPropertyChanging();
					this._CensusCity = value;
					this.SendPropertyChanged("CensusCity");
					this.OnCensusCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusProvince", DbType="VarChar(MAX)")]
		public string CensusProvince
		{
			get
			{
				return this._CensusProvince;
			}
			set
			{
				if ((this._CensusProvince != value))
				{
					this.OnCensusProvinceChanging(value);
					this.SendPropertyChanging();
					this._CensusProvince = value;
					this.SendPropertyChanged("CensusProvince");
					this.OnCensusProvinceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusPostCode", DbType="VarChar(MAX)")]
		public string CensusPostCode
		{
			get
			{
				return this._CensusPostCode;
			}
			set
			{
				if ((this._CensusPostCode != value))
				{
					this.OnCensusPostCodeChanging(value);
					this.SendPropertyChanging();
					this._CensusPostCode = value;
					this.SendPropertyChanged("CensusPostCode");
					this.OnCensusPostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMoveInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CensusMoveInDate
		{
			get
			{
				return this._CensusMoveInDate;
			}
			set
			{
				if ((this._CensusMoveInDate != value))
				{
					this.OnCensusMoveInDateChanging(value);
					this.SendPropertyChanging();
					this._CensusMoveInDate = value;
					this.SendPropertyChanged("CensusMoveInDate");
					this.OnCensusMoveInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMoveOutDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CensusMoveOutDate
		{
			get
			{
				return this._CensusMoveOutDate;
			}
			set
			{
				if ((this._CensusMoveOutDate != value))
				{
					this.OnCensusMoveOutDateChanging(value);
					this.SendPropertyChanging();
					this._CensusMoveOutDate = value;
					this.SendPropertyChanged("CensusMoveOutDate");
					this.OnCensusMoveOutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CensusMoveOutReason", DbType="VarChar(MAX)")]
		public string CensusMoveOutReason
		{
			get
			{
				return this._CensusMoveOutReason;
			}
			set
			{
				if ((this._CensusMoveOutReason != value))
				{
					this.OnCensusMoveOutReasonChanging(value);
					this.SendPropertyChanging();
					this._CensusMoveOutReason = value;
					this.SendPropertyChanged("CensusMoveOutReason");
					this.OnCensusMoveOutReasonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePhone", DbType="VarChar(50)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="VarChar(15)")]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordedStaffID", DbType="VarChar(MAX)")]
		public string RecordedStaffID
		{
			get
			{
				return this._RecordedStaffID;
			}
			set
			{
				if ((this._RecordedStaffID != value))
				{
					this.OnRecordedStaffIDChanging(value);
					this.SendPropertyChanging();
					this._RecordedStaffID = value;
					this.SendPropertyChanged("RecordedStaffID");
					this.OnRecordedStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeUpdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeUpdate
		{
			get
			{
				return this._DateTimeUpdate;
			}
			set
			{
				if ((this._DateTimeUpdate != value))
				{
					this.OnDateTimeUpdateChanging(value);
					this.SendPropertyChanging();
					this._DateTimeUpdate = value;
					this.SendPropertyChanged("DateTimeUpdate");
					this.OnDateTimeUpdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisabilityType", DbType="VarChar(MAX)")]
		public string DisabilityType
		{
			get
			{
				return this._DisabilityType;
			}
			set
			{
				if ((this._DisabilityType != value))
				{
					this.OnDisabilityTypeChanging(value);
					this.SendPropertyChanging();
					this._DisabilityType = value;
					this.SendPropertyChanged("DisabilityType");
					this.OnDisabilityTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Host", DbType="VarChar(50)")]
		public string Host
		{
			get
			{
				return this._Host;
			}
			set
			{
				if ((this._Host != value))
				{
					this.OnHostChanging(value);
					this.SendPropertyChanging();
					this._Host = value;
					this.SendPropertyChanged("Host");
					this.OnHostChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child_Pic", DbType="VarChar(MAX)")]
		public string Child_Pic
		{
			get
			{
				return this._Child_Pic;
			}
			set
			{
				if ((this._Child_Pic != value))
				{
					this.OnChild_PicChanging(value);
					this.SendPropertyChanging();
					this._Child_Pic = value;
					this.SendPropertyChanged("Child_Pic");
					this.OnChild_PicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child_PicCID", DbType="VarChar(MAX)")]
		public string Child_PicCID
		{
			get
			{
				return this._Child_PicCID;
			}
			set
			{
				if ((this._Child_PicCID != value))
				{
					this.OnChild_PicCIDChanging(value);
					this.SendPropertyChanging();
					this._Child_PicCID = value;
					this.SendPropertyChanged("Child_PicCID");
					this.OnChild_PicCIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysicalEvaluation")]
	public partial class PhysicalEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _PhysicalEvalCode;
		
		private string _PhysicalEvalValue;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<PhysicalProblem> _PhysicalProblem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnPhysicalEvalCodeChanging(string value);
    partial void OnPhysicalEvalCodeChanged();
    partial void OnPhysicalEvalValueChanging(string value);
    partial void OnPhysicalEvalValueChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public PhysicalEvaluation()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._PhysicalProblem = default(EntityRef<PhysicalProblem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhysicalEvalCode
		{
			get
			{
				return this._PhysicalEvalCode;
			}
			set
			{
				if ((this._PhysicalEvalCode != value))
				{
					if (this._PhysicalProblem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysicalEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._PhysicalEvalCode = value;
					this.SendPropertyChanged("PhysicalEvalCode");
					this.OnPhysicalEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalEvalValue", DbType="VarChar(50)")]
		public string PhysicalEvalValue
		{
			get
			{
				return this._PhysicalEvalValue;
			}
			set
			{
				if ((this._PhysicalEvalValue != value))
				{
					this.OnPhysicalEvalValueChanging(value);
					this.SendPropertyChanging();
					this._PhysicalEvalValue = value;
					this.SendPropertyChanged("PhysicalEvalValue");
					this.OnPhysicalEvalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_PhysicalEvaluation", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.PhysicalEvaluations.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.PhysicalEvaluations.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysicalProblem_PhysicalEvaluation", Storage="_PhysicalProblem", ThisKey="PhysicalEvalCode", OtherKey="PhysicalEvalCode", IsForeignKey=true)]
		public PhysicalProblem PhysicalProblem
		{
			get
			{
				return this._PhysicalProblem.Entity;
			}
			set
			{
				PhysicalProblem previousValue = this._PhysicalProblem.Entity;
				if (((previousValue != value) 
							|| (this._PhysicalProblem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhysicalProblem.Entity = null;
						previousValue.PhysicalEvaluations.Remove(this);
					}
					this._PhysicalProblem.Entity = value;
					if ((value != null))
					{
						value.PhysicalEvaluations.Add(this);
						this._PhysicalEvalCode = value.PhysicalEvalCode;
					}
					else
					{
						this._PhysicalEvalCode = default(string);
					}
					this.SendPropertyChanged("PhysicalProblem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysicalEvaluation_log")]
	public partial class PhysicalEvaluation_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _PhysicalEvalCode;
		
		private string _PhysicalEvalValue;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnPhysicalEvalCodeChanging(string value);
    partial void OnPhysicalEvalCodeChanged();
    partial void OnPhysicalEvalValueChanging(string value);
    partial void OnPhysicalEvalValueChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public PhysicalEvaluation_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhysicalEvalCode
		{
			get
			{
				return this._PhysicalEvalCode;
			}
			set
			{
				if ((this._PhysicalEvalCode != value))
				{
					this.OnPhysicalEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._PhysicalEvalCode = value;
					this.SendPropertyChanged("PhysicalEvalCode");
					this.OnPhysicalEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalEvalValue", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhysicalEvalValue
		{
			get
			{
				return this._PhysicalEvalValue;
			}
			set
			{
				if ((this._PhysicalEvalValue != value))
				{
					this.OnPhysicalEvalValueChanging(value);
					this.SendPropertyChanging();
					this._PhysicalEvalValue = value;
					this.SendPropertyChanged("PhysicalEvalValue");
					this.OnPhysicalEvalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PhysicalProblem")]
	public partial class PhysicalProblem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PhysicalEvalCode;
		
		private string _Name;
		
		private EntitySet<PhysicalEvaluation> _PhysicalEvaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysicalEvalCodeChanging(string value);
    partial void OnPhysicalEvalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PhysicalProblem()
		{
			this._PhysicalEvaluations = new EntitySet<PhysicalEvaluation>(new Action<PhysicalEvaluation>(this.attach_PhysicalEvaluations), new Action<PhysicalEvaluation>(this.detach_PhysicalEvaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PhysicalEvalCode
		{
			get
			{
				return this._PhysicalEvalCode;
			}
			set
			{
				if ((this._PhysicalEvalCode != value))
				{
					this.OnPhysicalEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._PhysicalEvalCode = value;
					this.SendPropertyChanged("PhysicalEvalCode");
					this.OnPhysicalEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PhysicalProblem_PhysicalEvaluation", Storage="_PhysicalEvaluations", ThisKey="PhysicalEvalCode", OtherKey="PhysicalEvalCode")]
		public EntitySet<PhysicalEvaluation> PhysicalEvaluations
		{
			get
			{
				return this._PhysicalEvaluations;
			}
			set
			{
				this._PhysicalEvaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PhysicalEvaluations(PhysicalEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.PhysicalProblem = this;
		}
		
		private void detach_PhysicalEvaluations(PhysicalEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.PhysicalProblem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Plannig")]
	public partial class Plannig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SACTCode;
		
		private System.Nullable<System.DateTime> _ExpectedDate;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    partial void OnExpectedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpectedDateChanged();
    #endregion
		
		public Plannig()
		{
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpectedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ExpectedDate
		{
			get
			{
				return this._ExpectedDate;
			}
			set
			{
				if ((this._ExpectedDate != value))
				{
					this.OnExpectedDateChanging(value);
					this.SendPropertyChanging();
					this._ExpectedDate = value;
					this.SendPropertyChanged("ExpectedDate");
					this.OnExpectedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Plannig", Storage="_Activity", ThisKey="SACTCode", OtherKey="ACTCode", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.Plannigs.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.Plannigs.Add(this);
						this._SACTCode = value.ACTCode;
					}
					else
					{
						this._SACTCode = default(string);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Provider")]
	public partial class Provider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProviderCode;
		
		private string _ProviderName;
		
		private string _OrgCode;
		
		private EntitySet<Host> _Hosts;
		
		private EntityRef<Organization> _Organization;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderCodeChanging(string value);
    partial void OnProviderCodeChanged();
    partial void OnProviderNameChanging(string value);
    partial void OnProviderNameChanged();
    partial void OnOrgCodeChanging(string value);
    partial void OnOrgCodeChanged();
    #endregion
		
		public Provider()
		{
			this._Hosts = new EntitySet<Host>(new Action<Host>(this.attach_Hosts), new Action<Host>(this.detach_Hosts));
			this._Organization = default(EntityRef<Organization>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderCode
		{
			get
			{
				return this._ProviderCode;
			}
			set
			{
				if ((this._ProviderCode != value))
				{
					this.OnProviderCodeChanging(value);
					this.SendPropertyChanging();
					this._ProviderCode = value;
					this.SendPropertyChanged("ProviderCode");
					this.OnProviderCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderName", DbType="VarChar(50)")]
		public string ProviderName
		{
			get
			{
				return this._ProviderName;
			}
			set
			{
				if ((this._ProviderName != value))
				{
					this.OnProviderNameChanging(value);
					this.SendPropertyChanging();
					this._ProviderName = value;
					this.SendPropertyChanged("ProviderName");
					this.OnProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrgCode", DbType="VarChar(50)")]
		public string OrgCode
		{
			get
			{
				return this._OrgCode;
			}
			set
			{
				if ((this._OrgCode != value))
				{
					if (this._Organization.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrgCodeChanging(value);
					this.SendPropertyChanging();
					this._OrgCode = value;
					this.SendPropertyChanged("OrgCode");
					this.OnOrgCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Provider_Host", Storage="_Hosts", ThisKey="ProviderCode", OtherKey="ProviderCode")]
		public EntitySet<Host> Hosts
		{
			get
			{
				return this._Hosts;
			}
			set
			{
				this._Hosts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Organization_Provider", Storage="_Organization", ThisKey="OrgCode", OtherKey="OrgCode", IsForeignKey=true)]
		public Organization Organization
		{
			get
			{
				return this._Organization.Entity;
			}
			set
			{
				Organization previousValue = this._Organization.Entity;
				if (((previousValue != value) 
							|| (this._Organization.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Organization.Entity = null;
						previousValue.Providers.Remove(this);
					}
					this._Organization.Entity = value;
					if ((value != null))
					{
						value.Providers.Add(this);
						this._OrgCode = value.OrgCode;
					}
					else
					{
						this._OrgCode = default(string);
					}
					this.SendPropertyChanged("Organization");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hosts(Host entity)
		{
			this.SendPropertyChanging();
			entity.Provider = this;
		}
		
		private void detach_Hosts(Host entity)
		{
			this.SendPropertyChanging();
			entity.Provider = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Province")]
	public partial class Province : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ProvinceID;
		
		private string _ProvinceDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProvinceIDChanging(string value);
    partial void OnProvinceIDChanged();
    partial void OnProvinceDescriptionChanging(string value);
    partial void OnProvinceDescriptionChanged();
    #endregion
		
		public Province()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProvinceID
		{
			get
			{
				return this._ProvinceID;
			}
			set
			{
				if ((this._ProvinceID != value))
				{
					this.OnProvinceIDChanging(value);
					this.SendPropertyChanging();
					this._ProvinceID = value;
					this.SendPropertyChanged("ProvinceID");
					this.OnProvinceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceDescription", DbType="VarChar(MAX)")]
		public string ProvinceDescription
		{
			get
			{
				return this._ProvinceDescription;
			}
			set
			{
				if ((this._ProvinceDescription != value))
				{
					this.OnProvinceDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ProvinceDescription = value;
					this.SendPropertyChanged("ProvinceDescription");
					this.OnProvinceDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.r_LiveStatus")]
	public partial class r_LiveStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LiveStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLiveStatusChanging(string value);
    partial void OnLiveStatusChanged();
    #endregion
		
		public r_LiveStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LiveStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LiveStatus
		{
			get
			{
				return this._LiveStatus;
			}
			set
			{
				if ((this._LiveStatus != value))
				{
					this.OnLiveStatusChanging(value);
					this.SendPropertyChanging();
					this._LiveStatus = value;
					this.SendPropertyChanged("LiveStatus");
					this.OnLiveStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.r_MariageStatus")]
	public partial class r_MariageStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MariageStatus;
		
		private string _code;
		
		private string _codehl7;
		
		private string _dec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMariageStatusChanging(string value);
    partial void OnMariageStatusChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void Oncodehl7Changing(string value);
    partial void Oncodehl7Changed();
    partial void OndecChanging(string value);
    partial void OndecChanged();
    #endregion
		
		public r_MariageStatus()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MariageStatus", DbType="VarChar(50)")]
		public string MariageStatus
		{
			get
			{
				return this._MariageStatus;
			}
			set
			{
				if ((this._MariageStatus != value))
				{
					this.OnMariageStatusChanging(value);
					this.SendPropertyChanging();
					this._MariageStatus = value;
					this.SendPropertyChanged("MariageStatus");
					this.OnMariageStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_codehl7", DbType="VarChar(50)")]
		public string codehl7
		{
			get
			{
				return this._codehl7;
			}
			set
			{
				if ((this._codehl7 != value))
				{
					this.Oncodehl7Changing(value);
					this.SendPropertyChanging();
					this._codehl7 = value;
					this.SendPropertyChanged("codehl7");
					this.Oncodehl7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dec", DbType="VarChar(MAX)")]
		public string dec
		{
			get
			{
				return this._dec;
			}
			set
			{
				if ((this._dec != value))
				{
					this.OndecChanging(value);
					this.SendPropertyChanging();
					this._dec = value;
					this.SendPropertyChanged("dec");
					this.OndecChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.r_yesno")]
	public partial class r_yesno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _dec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OndecChanging(string value);
    partial void OndecChanged();
    #endregion
		
		public r_yesno()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dec", DbType="VarChar(50)")]
		public string dec
		{
			get
			{
				return this._dec;
			}
			set
			{
				if ((this._dec != value))
				{
					this.OndecChanging(value);
					this.SendPropertyChanging();
					this._dec = value;
					this.SendPropertyChanged("dec");
					this.OndecChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.reg_heal")]
	public partial class reg_heal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private string _dec;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OndecChanging(string value);
    partial void OndecChanged();
    #endregion
		
		public reg_heal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dec", DbType="VarChar(MAX)")]
		public string dec
		{
			get
			{
				return this._dec;
			}
			set
			{
				if ((this._dec != value))
				{
					this.OndecChanging(value);
					this.SendPropertyChanging();
					this._dec = value;
					this.SendPropertyChanged("dec");
					this.OndecChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relation")]
	public partial class Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _RelationID;
		
		private string _RelationThaiDescription;
		
		private string _RelationHL7Code;
		
		private string _RelationEngName;
		
		private string _RelationEngLongDescription;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRelationIDChanging(string value);
    partial void OnRelationIDChanged();
    partial void OnRelationThaiDescriptionChanging(string value);
    partial void OnRelationThaiDescriptionChanged();
    partial void OnRelationHL7CodeChanging(string value);
    partial void OnRelationHL7CodeChanged();
    partial void OnRelationEngNameChanging(string value);
    partial void OnRelationEngNameChanged();
    partial void OnRelationEngLongDescriptionChanging(string value);
    partial void OnRelationEngLongDescriptionChanged();
    #endregion
		
		public Relation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationID", DbType="VarChar(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RelationID
		{
			get
			{
				return this._RelationID;
			}
			set
			{
				if ((this._RelationID != value))
				{
					this.OnRelationIDChanging(value);
					this.SendPropertyChanging();
					this._RelationID = value;
					this.SendPropertyChanged("RelationID");
					this.OnRelationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationThaiDescription", DbType="VarChar(MAX)")]
		public string RelationThaiDescription
		{
			get
			{
				return this._RelationThaiDescription;
			}
			set
			{
				if ((this._RelationThaiDescription != value))
				{
					this.OnRelationThaiDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RelationThaiDescription = value;
					this.SendPropertyChanged("RelationThaiDescription");
					this.OnRelationThaiDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationHL7Code", DbType="VarChar(10)")]
		public string RelationHL7Code
		{
			get
			{
				return this._RelationHL7Code;
			}
			set
			{
				if ((this._RelationHL7Code != value))
				{
					this.OnRelationHL7CodeChanging(value);
					this.SendPropertyChanging();
					this._RelationHL7Code = value;
					this.SendPropertyChanged("RelationHL7Code");
					this.OnRelationHL7CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationEngName", DbType="VarChar(MAX)")]
		public string RelationEngName
		{
			get
			{
				return this._RelationEngName;
			}
			set
			{
				if ((this._RelationEngName != value))
				{
					this.OnRelationEngNameChanging(value);
					this.SendPropertyChanging();
					this._RelationEngName = value;
					this.SendPropertyChanged("RelationEngName");
					this.OnRelationEngNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelationEngLongDescription", DbType="VarChar(MAX)")]
		public string RelationEngLongDescription
		{
			get
			{
				return this._RelationEngLongDescription;
			}
			set
			{
				if ((this._RelationEngLongDescription != value))
				{
					this.OnRelationEngLongDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RelationEngLongDescription = value;
					this.SendPropertyChanged("RelationEngLongDescription");
					this.OnRelationEngLongDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_id;
		
		private string _Role_description;
		
		private EntitySet<Role_Staff> _Role_Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_idChanging(int value);
    partial void OnRole_idChanged();
    partial void OnRole_descriptionChanging(string value);
    partial void OnRole_descriptionChanged();
    #endregion
		
		public Role()
		{
			this._Role_Staffs = new EntitySet<Role_Staff>(new Action<Role_Staff>(this.attach_Role_Staffs), new Action<Role_Staff>(this.detach_Role_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_id
		{
			get
			{
				return this._Role_id;
			}
			set
			{
				if ((this._Role_id != value))
				{
					this.OnRole_idChanging(value);
					this.SendPropertyChanging();
					this._Role_id = value;
					this.SendPropertyChanged("Role_id");
					this.OnRole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_description", DbType="VarChar(MAX)")]
		public string Role_description
		{
			get
			{
				return this._Role_description;
			}
			set
			{
				if ((this._Role_description != value))
				{
					this.OnRole_descriptionChanging(value);
					this.SendPropertyChanging();
					this._Role_description = value;
					this.SendPropertyChanged("Role_description");
					this.OnRole_descriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role_Staff", Storage="_Role_Staffs", ThisKey="Role_id", OtherKey="Role_id")]
		public EntitySet<Role_Staff> Role_Staffs
		{
			get
			{
				return this._Role_Staffs;
			}
			set
			{
				this._Role_Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Role_Staffs(Role_Staff entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Role_Staffs(Role_Staff entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role_Staff")]
	public partial class Role_Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Role_id;
		
		private string _Staff_id;
		
		private EntityRef<Employee> _Employee;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRole_idChanging(int value);
    partial void OnRole_idChanged();
    partial void OnStaff_idChanging(string value);
    partial void OnStaff_idChanged();
    #endregion
		
		public Role_Staff()
		{
			this._Employee = default(EntityRef<Employee>);
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Role_id
		{
			get
			{
				return this._Role_id;
			}
			set
			{
				if ((this._Role_id != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRole_idChanging(value);
					this.SendPropertyChanging();
					this._Role_id = value;
					this.SendPropertyChanged("Role_id");
					this.OnRole_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_id
		{
			get
			{
				return this._Staff_id;
			}
			set
			{
				if ((this._Staff_id != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_idChanging(value);
					this.SendPropertyChanging();
					this._Staff_id = value;
					this.SendPropertyChanged("Staff_id");
					this.OnStaff_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Role_Staff", Storage="_Employee", ThisKey="Staff_id", OtherKey="Staff_id", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.Role_Staffs.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.Role_Staffs.Add(this);
						this._Staff_id = value.Staff_id;
					}
					else
					{
						this._Staff_id = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Role_Staff", Storage="_Role", ThisKey="Role_id", OtherKey="Role_id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Role_Staffs.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Role_Staffs.Add(this);
						this._Role_id = value.Role_id;
					}
					else
					{
						this._Role_id = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SelfCareAbility")]
	public partial class SelfCareAbility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SelfEvalCode;
		
		private string _Name;
		
		private EntitySet<SelfCareEvaluation> _SelfCareEvaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSelfEvalCodeChanging(string value);
    partial void OnSelfEvalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SelfCareAbility()
		{
			this._SelfCareEvaluations = new EntitySet<SelfCareEvaluation>(new Action<SelfCareEvaluation>(this.attach_SelfCareEvaluations), new Action<SelfCareEvaluation>(this.detach_SelfCareEvaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SelfEvalCode
		{
			get
			{
				return this._SelfEvalCode;
			}
			set
			{
				if ((this._SelfEvalCode != value))
				{
					this.OnSelfEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._SelfEvalCode = value;
					this.SendPropertyChanged("SelfEvalCode");
					this.OnSelfEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SelfCareAbility_SelfCareEvaluation", Storage="_SelfCareEvaluations", ThisKey="SelfEvalCode", OtherKey="SelfEvalCode")]
		public EntitySet<SelfCareEvaluation> SelfCareEvaluations
		{
			get
			{
				return this._SelfCareEvaluations;
			}
			set
			{
				this._SelfCareEvaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SelfCareEvaluations(SelfCareEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.SelfCareAbility = this;
		}
		
		private void detach_SelfCareEvaluations(SelfCareEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.SelfCareAbility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SelfCareEvaluation")]
	public partial class SelfCareEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SelfEvalCode;
		
		private string _SelfEvalValue;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<SelfCareAbility> _SelfCareAbility;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSelfEvalCodeChanging(string value);
    partial void OnSelfEvalCodeChanged();
    partial void OnSelfEvalValueChanging(string value);
    partial void OnSelfEvalValueChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public SelfCareEvaluation()
		{
			this._SelfCareAbility = default(EntityRef<SelfCareAbility>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SelfEvalCode
		{
			get
			{
				return this._SelfEvalCode;
			}
			set
			{
				if ((this._SelfEvalCode != value))
				{
					if (this._SelfCareAbility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSelfEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._SelfEvalCode = value;
					this.SendPropertyChanged("SelfEvalCode");
					this.OnSelfEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfEvalValue", DbType="VarChar(50)")]
		public string SelfEvalValue
		{
			get
			{
				return this._SelfEvalValue;
			}
			set
			{
				if ((this._SelfEvalValue != value))
				{
					this.OnSelfEvalValueChanging(value);
					this.SendPropertyChanging();
					this._SelfEvalValue = value;
					this.SendPropertyChanged("SelfEvalValue");
					this.OnSelfEvalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SelfCareAbility_SelfCareEvaluation", Storage="_SelfCareAbility", ThisKey="SelfEvalCode", OtherKey="SelfEvalCode", IsForeignKey=true)]
		public SelfCareAbility SelfCareAbility
		{
			get
			{
				return this._SelfCareAbility.Entity;
			}
			set
			{
				SelfCareAbility previousValue = this._SelfCareAbility.Entity;
				if (((previousValue != value) 
							|| (this._SelfCareAbility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SelfCareAbility.Entity = null;
						previousValue.SelfCareEvaluations.Remove(this);
					}
					this._SelfCareAbility.Entity = value;
					if ((value != null))
					{
						value.SelfCareEvaluations.Add(this);
						this._SelfEvalCode = value.SelfEvalCode;
					}
					else
					{
						this._SelfEvalCode = default(string);
					}
					this.SendPropertyChanged("SelfCareAbility");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SelfCareEvaluation_log")]
	public partial class SelfCareEvaluation_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SelfEvalCode;
		
		private string _SelfEvalValue;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSelfEvalCodeChanging(string value);
    partial void OnSelfEvalCodeChanged();
    partial void OnSelfEvalValueChanging(string value);
    partial void OnSelfEvalValueChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public SelfCareEvaluation_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SelfEvalCode
		{
			get
			{
				return this._SelfEvalCode;
			}
			set
			{
				if ((this._SelfEvalCode != value))
				{
					this.OnSelfEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._SelfEvalCode = value;
					this.SendPropertyChanged("SelfEvalCode");
					this.OnSelfEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SelfEvalValue", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SelfEvalValue
		{
			get
			{
				return this._SelfEvalValue;
			}
			set
			{
				if ((this._SelfEvalValue != value))
				{
					this.OnSelfEvalValueChanging(value);
					this.SendPropertyChanging();
					this._SelfEvalValue = value;
					this.SendPropertyChanged("SelfEvalValue");
					this.OnSelfEvalValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Service")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SVCCode;
		
		private string _SVCDesc;
		
		private string _StaffRole;
		
		private string _SVCName;
		
		private string _HostCode;
		
		private string _SVCType;
		
		private string _SVCObjective;
		
		private string _SVCSupport;
		
		private string _SVCCoverage;
		
		private string _SVCStart;
		
		private string _SVCEnd;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<ConditionService> _ConditionServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSVCCodeChanging(string value);
    partial void OnSVCCodeChanged();
    partial void OnSVCDescChanging(string value);
    partial void OnSVCDescChanged();
    partial void OnStaffRoleChanging(string value);
    partial void OnStaffRoleChanged();
    partial void OnSVCNameChanging(string value);
    partial void OnSVCNameChanged();
    partial void OnHostCodeChanging(string value);
    partial void OnHostCodeChanged();
    partial void OnSVCTypeChanging(string value);
    partial void OnSVCTypeChanged();
    partial void OnSVCObjectiveChanging(string value);
    partial void OnSVCObjectiveChanged();
    partial void OnSVCSupportChanging(string value);
    partial void OnSVCSupportChanged();
    partial void OnSVCCoverageChanging(string value);
    partial void OnSVCCoverageChanged();
    partial void OnSVCStartChanging(string value);
    partial void OnSVCStartChanged();
    partial void OnSVCEndChanging(string value);
    partial void OnSVCEndChanged();
    #endregion
		
		public Service()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._ConditionServices = new EntitySet<ConditionService>(new Action<ConditionService>(this.attach_ConditionServices), new Action<ConditionService>(this.detach_ConditionServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SVCCode
		{
			get
			{
				return this._SVCCode;
			}
			set
			{
				if ((this._SVCCode != value))
				{
					this.OnSVCCodeChanging(value);
					this.SendPropertyChanging();
					this._SVCCode = value;
					this.SendPropertyChanged("SVCCode");
					this.OnSVCCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCDesc", DbType="VarChar(255)")]
		public string SVCDesc
		{
			get
			{
				return this._SVCDesc;
			}
			set
			{
				if ((this._SVCDesc != value))
				{
					this.OnSVCDescChanging(value);
					this.SendPropertyChanging();
					this._SVCDesc = value;
					this.SendPropertyChanged("SVCDesc");
					this.OnSVCDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole", DbType="VarChar(255)")]
		public string StaffRole
		{
			get
			{
				return this._StaffRole;
			}
			set
			{
				if ((this._StaffRole != value))
				{
					this.OnStaffRoleChanging(value);
					this.SendPropertyChanging();
					this._StaffRole = value;
					this.SendPropertyChanged("StaffRole");
					this.OnStaffRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCName", DbType="VarChar(255)")]
		public string SVCName
		{
			get
			{
				return this._SVCName;
			}
			set
			{
				if ((this._SVCName != value))
				{
					this.OnSVCNameChanging(value);
					this.SendPropertyChanging();
					this._SVCName = value;
					this.SendPropertyChanged("SVCName");
					this.OnSVCNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostCode", DbType="VarChar(255)")]
		public string HostCode
		{
			get
			{
				return this._HostCode;
			}
			set
			{
				if ((this._HostCode != value))
				{
					this.OnHostCodeChanging(value);
					this.SendPropertyChanging();
					this._HostCode = value;
					this.SendPropertyChanged("HostCode");
					this.OnHostCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCType", DbType="VarChar(255)")]
		public string SVCType
		{
			get
			{
				return this._SVCType;
			}
			set
			{
				if ((this._SVCType != value))
				{
					this.OnSVCTypeChanging(value);
					this.SendPropertyChanging();
					this._SVCType = value;
					this.SendPropertyChanged("SVCType");
					this.OnSVCTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCObjective", DbType="VarChar(255)")]
		public string SVCObjective
		{
			get
			{
				return this._SVCObjective;
			}
			set
			{
				if ((this._SVCObjective != value))
				{
					this.OnSVCObjectiveChanging(value);
					this.SendPropertyChanging();
					this._SVCObjective = value;
					this.SendPropertyChanged("SVCObjective");
					this.OnSVCObjectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCSupport", DbType="VarChar(255)")]
		public string SVCSupport
		{
			get
			{
				return this._SVCSupport;
			}
			set
			{
				if ((this._SVCSupport != value))
				{
					this.OnSVCSupportChanging(value);
					this.SendPropertyChanging();
					this._SVCSupport = value;
					this.SendPropertyChanged("SVCSupport");
					this.OnSVCSupportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCCoverage", DbType="VarChar(255)")]
		public string SVCCoverage
		{
			get
			{
				return this._SVCCoverage;
			}
			set
			{
				if ((this._SVCCoverage != value))
				{
					this.OnSVCCoverageChanging(value);
					this.SendPropertyChanging();
					this._SVCCoverage = value;
					this.SendPropertyChanged("SVCCoverage");
					this.OnSVCCoverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCStart", DbType="VarChar(255)")]
		public string SVCStart
		{
			get
			{
				return this._SVCStart;
			}
			set
			{
				if ((this._SVCStart != value))
				{
					this.OnSVCStartChanging(value);
					this.SendPropertyChanging();
					this._SVCStart = value;
					this.SendPropertyChanged("SVCStart");
					this.OnSVCStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SVCEnd", DbType="VarChar(255)")]
		public string SVCEnd
		{
			get
			{
				return this._SVCEnd;
			}
			set
			{
				if ((this._SVCEnd != value))
				{
					this.OnSVCEndChanging(value);
					this.SendPropertyChanging();
					this._SVCEnd = value;
					this.SendPropertyChanged("SVCEnd");
					this.OnSVCEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Activity", Storage="_Activities", ThisKey="SVCCode", OtherKey="SVCCode")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ConditionService", Storage="_ConditionServices", ThisKey="SVCCode", OtherKey="SVCCODE")]
		public EntitySet<ConditionService> ConditionServices
		{
			get
			{
				return this._ConditionServices;
			}
			set
			{
				this._ConditionServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ConditionServices(ConditionService entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ConditionServices(ConditionService entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceProvision")]
	public partial class ServiceProvision : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _HostID;
		
		private string _StaffID;
		
		private System.Nullable<System.DateTime> _PSDateTime;
		
		private EntitySet<ServiceProvisionDetail> _ServiceProvisionDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnHostIDChanging(string value);
    partial void OnHostIDChanged();
    partial void OnStaffIDChanging(string value);
    partial void OnStaffIDChanged();
    partial void OnPSDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnPSDateTimeChanged();
    #endregion
		
		public ServiceProvision()
		{
			this._ServiceProvisionDetails = new EntitySet<ServiceProvisionDetail>(new Action<ServiceProvisionDetail>(this.attach_ServiceProvisionDetails), new Action<ServiceProvisionDetail>(this.detach_ServiceProvisionDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HostID", DbType="VarChar(50)")]
		public string HostID
		{
			get
			{
				return this._HostID;
			}
			set
			{
				if ((this._HostID != value))
				{
					this.OnHostIDChanging(value);
					this.SendPropertyChanging();
					this._HostID = value;
					this.SendPropertyChanged("HostID");
					this.OnHostIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffID", DbType="VarChar(50)")]
		public string StaffID
		{
			get
			{
				return this._StaffID;
			}
			set
			{
				if ((this._StaffID != value))
				{
					this.OnStaffIDChanging(value);
					this.SendPropertyChanging();
					this._StaffID = value;
					this.SendPropertyChanged("StaffID");
					this.OnStaffIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PSDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> PSDateTime
		{
			get
			{
				return this._PSDateTime;
			}
			set
			{
				if ((this._PSDateTime != value))
				{
					this.OnPSDateTimeChanging(value);
					this.SendPropertyChanging();
					this._PSDateTime = value;
					this.SendPropertyChanged("PSDateTime");
					this.OnPSDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceProvision_ServiceProvisionDetail", Storage="_ServiceProvisionDetails", ThisKey="id", OtherKey="id")]
		public EntitySet<ServiceProvisionDetail> ServiceProvisionDetails
		{
			get
			{
				return this._ServiceProvisionDetails;
			}
			set
			{
				this._ServiceProvisionDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceProvisionDetails(ServiceProvisionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvision = this;
		}
		
		private void detach_ServiceProvisionDetails(ServiceProvisionDetail entity)
		{
			this.SendPropertyChanging();
			entity.ServiceProvision = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceProvisionDetails")]
	public partial class ServiceProvisionDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ACTCode;
		
		private System.DateTime _logDateTime;
		
		private string _Note;
		
		private string _SACTCode;
		
		private EntityRef<ServiceProvision> _ServiceProvision;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnlogDateTimeChanging(System.DateTime value);
    partial void OnlogDateTimeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    #endregion
		
		public ServiceProvisionDetail()
		{
			this._ServiceProvision = default(EntityRef<ServiceProvision>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					if (this._ServiceProvision.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime logDateTime
		{
			get
			{
				return this._logDateTime;
			}
			set
			{
				if ((this._logDateTime != value))
				{
					this.OnlogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._logDateTime = value;
					this.SendPropertyChanged("logDateTime");
					this.OnlogDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="VarChar(50)")]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceProvision_ServiceProvisionDetail", Storage="_ServiceProvision", ThisKey="id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ServiceProvision ServiceProvision
		{
			get
			{
				return this._ServiceProvision.Entity;
			}
			set
			{
				ServiceProvision previousValue = this._ServiceProvision.Entity;
				if (((previousValue != value) 
							|| (this._ServiceProvision.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceProvision.Entity = null;
						previousValue.ServiceProvisionDetails.Remove(this);
					}
					this._ServiceProvision.Entity = value;
					if ((value != null))
					{
						value.ServiceProvisionDetails.Add(this);
						this._id = value.id;
					}
					else
					{
						this._id = default(int);
					}
					this.SendPropertyChanged("ServiceProvision");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceProvisionDetails_log")]
	public partial class ServiceProvisionDetails_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ACTCode;
		
		private string _Note;
		
		private System.DateTime _logDateTime;
		
		private string _SACTCode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    partial void OnlogDateTimeChanging(System.DateTime value);
    partial void OnlogDateTimeChanged();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    #endregion
		
		public ServiceProvisionDetails_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime logDateTime
		{
			get
			{
				return this._logDateTime;
			}
			set
			{
				if ((this._logDateTime != value))
				{
					this.OnlogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._logDateTime = value;
					this.SendPropertyChanged("logDateTime");
					this.OnlogDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="VarChar(50)")]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceProvisionVsPerson")]
	public partial class ServiceProvisionVsPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CaseNo;
		
		private string _PSNumber;
		
		private string _CID;
		
		private int _id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCaseNoChanging(string value);
    partial void OnCaseNoChanged();
    partial void OnPSNumberChanging(string value);
    partial void OnPSNumberChanged();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public ServiceProvisionVsPerson()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PSNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PSNumber
		{
			get
			{
				return this._PSNumber;
			}
			set
			{
				if ((this._PSNumber != value))
				{
					this.OnPSNumberChanging(value);
					this.SendPropertyChanging();
					this._PSNumber = value;
					this.SendPropertyChanged("PSNumber");
					this.OnPSNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SightEvaluation")]
	public partial class SightEvaluation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SightEvalCode;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<SightProblem> _SightProblem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSightEvalCodeChanging(string value);
    partial void OnSightEvalCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public SightEvaluation()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._SightProblem = default(EntityRef<SightProblem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SightEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SightEvalCode
		{
			get
			{
				return this._SightEvalCode;
			}
			set
			{
				if ((this._SightEvalCode != value))
				{
					if (this._SightProblem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSightEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._SightEvalCode = value;
					this.SendPropertyChanged("SightEvalCode");
					this.OnSightEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_SightEvaluation", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.SightEvaluations.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.SightEvaluations.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SightProblem_SightEvaluation", Storage="_SightProblem", ThisKey="SightEvalCode", OtherKey="SightEvalCode", IsForeignKey=true)]
		public SightProblem SightProblem
		{
			get
			{
				return this._SightProblem.Entity;
			}
			set
			{
				SightProblem previousValue = this._SightProblem.Entity;
				if (((previousValue != value) 
							|| (this._SightProblem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SightProblem.Entity = null;
						previousValue.SightEvaluations.Remove(this);
					}
					this._SightProblem.Entity = value;
					if ((value != null))
					{
						value.SightEvaluations.Add(this);
						this._SightEvalCode = value.SightEvalCode;
					}
					else
					{
						this._SightEvalCode = default(string);
					}
					this.SendPropertyChanged("SightProblem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SightEvaluation_log")]
	public partial class SightEvaluation_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _SightEvalCode;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnSightEvalCodeChanging(string value);
    partial void OnSightEvalCodeChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public SightEvaluation_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SightEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SightEvalCode
		{
			get
			{
				return this._SightEvalCode;
			}
			set
			{
				if ((this._SightEvalCode != value))
				{
					this.OnSightEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._SightEvalCode = value;
					this.SendPropertyChanged("SightEvalCode");
					this.OnSightEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SightProblem")]
	public partial class SightProblem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SightEvalCode;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<SightEvaluation> _SightEvaluations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSightEvalCodeChanging(string value);
    partial void OnSightEvalCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SightProblem()
		{
			this._SightEvaluations = new EntitySet<SightEvaluation>(new Action<SightEvaluation>(this.attach_SightEvaluations), new Action<SightEvaluation>(this.detach_SightEvaluations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SightEvalCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SightEvalCode
		{
			get
			{
				return this._SightEvalCode;
			}
			set
			{
				if ((this._SightEvalCode != value))
				{
					this.OnSightEvalCodeChanging(value);
					this.SendPropertyChanging();
					this._SightEvalCode = value;
					this.SendPropertyChanged("SightEvalCode");
					this.OnSightEvalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SightProblem_SightEvaluation", Storage="_SightEvaluations", ThisKey="SightEvalCode", OtherKey="SightEvalCode")]
		public EntitySet<SightEvaluation> SightEvaluations
		{
			get
			{
				return this._SightEvaluations;
			}
			set
			{
				this._SightEvaluations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SightEvaluations(SightEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.SightProblem = this;
		}
		
		private void detach_SightEvaluations(SightEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.SightProblem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubActivity")]
	public partial class SubActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SACTCode;
		
		private string _SACTDesc;
		
		private string _ACTCode;
		
		private EntitySet<GrowthEvaluation> _GrowthEvaluations;
		
		private EntityRef<Activity> _Activity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    partial void OnSACTDescChanging(string value);
    partial void OnSACTDescChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    #endregion
		
		public SubActivity()
		{
			this._GrowthEvaluations = new EntitySet<GrowthEvaluation>(new Action<GrowthEvaluation>(this.attach_GrowthEvaluations), new Action<GrowthEvaluation>(this.detach_GrowthEvaluations));
			this._Activity = default(EntityRef<Activity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTDesc", DbType="VarChar(255)")]
		public string SACTDesc
		{
			get
			{
				return this._SACTDesc;
			}
			set
			{
				if ((this._SACTDesc != value))
				{
					this.OnSACTDescChanging(value);
					this.SendPropertyChanging();
					this._SACTDesc = value;
					this.SendPropertyChanged("SACTDesc");
					this.OnSACTDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(255)")]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SubActivity_GrowthEvaluation", Storage="_GrowthEvaluations", ThisKey="SACTCode", OtherKey="SACTCode")]
		public EntitySet<GrowthEvaluation> GrowthEvaluations
		{
			get
			{
				return this._GrowthEvaluations;
			}
			set
			{
				this._GrowthEvaluations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_SubActivity", Storage="_Activity", ThisKey="ACTCode", OtherKey="ACTCode", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.SubActivities.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.SubActivities.Add(this);
						this._ACTCode = value.ACTCode;
					}
					else
					{
						this._ACTCode = default(string);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GrowthEvaluations(GrowthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.SubActivity = this;
		}
		
		private void detach_GrowthEvaluations(GrowthEvaluation entity)
		{
			this.SendPropertyChanging();
			entity.SubActivity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubActivity2")]
	public partial class SubActivity2 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SACTCode;
		
		private string _AgeCode;
		
		private string _SACT2Desc;
		
		private string _SACT2Code;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSACTCodeChanging(string value);
    partial void OnSACTCodeChanged();
    partial void OnAgeCodeChanging(string value);
    partial void OnAgeCodeChanged();
    partial void OnSACT2DescChanging(string value);
    partial void OnSACT2DescChanged();
    partial void OnSACT2CodeChanging(string value);
    partial void OnSACT2CodeChanged();
    #endregion
		
		public SubActivity2()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACTCode", DbType="VarChar(255)")]
		public string SACTCode
		{
			get
			{
				return this._SACTCode;
			}
			set
			{
				if ((this._SACTCode != value))
				{
					this.OnSACTCodeChanging(value);
					this.SendPropertyChanging();
					this._SACTCode = value;
					this.SendPropertyChanged("SACTCode");
					this.OnSACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeCode", DbType="VarChar(50)")]
		public string AgeCode
		{
			get
			{
				return this._AgeCode;
			}
			set
			{
				if ((this._AgeCode != value))
				{
					this.OnAgeCodeChanging(value);
					this.SendPropertyChanging();
					this._AgeCode = value;
					this.SendPropertyChanged("AgeCode");
					this.OnAgeCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACT2Desc", DbType="VarChar(MAX)")]
		public string SACT2Desc
		{
			get
			{
				return this._SACT2Desc;
			}
			set
			{
				if ((this._SACT2Desc != value))
				{
					this.OnSACT2DescChanging(value);
					this.SendPropertyChanging();
					this._SACT2Desc = value;
					this.SendPropertyChanged("SACT2Desc");
					this.OnSACT2DescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SACT2Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SACT2Code
		{
			get
			{
				return this._SACT2Code;
			}
			set
			{
				if ((this._SACT2Code != value))
				{
					this.OnSACT2CodeChanging(value);
					this.SendPropertyChanging();
					this._SACT2Code = value;
					this.SendPropertyChanged("SACT2Code");
					this.OnSACT2CodeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubWelfare")]
	public partial class SubWelfare : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubWelfareID;
		
		private string _SubWelfareDescription;
		
		private string _WelfareID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubWelfareIDChanging(string value);
    partial void OnSubWelfareIDChanged();
    partial void OnSubWelfareDescriptionChanging(string value);
    partial void OnSubWelfareDescriptionChanged();
    partial void OnWelfareIDChanging(string value);
    partial void OnWelfareIDChanged();
    #endregion
		
		public SubWelfare()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubWelfareID", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubWelfareID
		{
			get
			{
				return this._SubWelfareID;
			}
			set
			{
				if ((this._SubWelfareID != value))
				{
					this.OnSubWelfareIDChanging(value);
					this.SendPropertyChanging();
					this._SubWelfareID = value;
					this.SendPropertyChanged("SubWelfareID");
					this.OnSubWelfareIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubWelfareDescription", DbType="NVarChar(255)")]
		public string SubWelfareDescription
		{
			get
			{
				return this._SubWelfareDescription;
			}
			set
			{
				if ((this._SubWelfareDescription != value))
				{
					this.OnSubWelfareDescriptionChanging(value);
					this.SendPropertyChanging();
					this._SubWelfareDescription = value;
					this.SendPropertyChanged("SubWelfareDescription");
					this.OnSubWelfareDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WelfareID", DbType="NVarChar(255)")]
		public string WelfareID
		{
			get
			{
				return this._WelfareID;
			}
			set
			{
				if ((this._WelfareID != value))
				{
					this.OnWelfareIDChanging(value);
					this.SendPropertyChanging();
					this._WelfareID = value;
					this.SendPropertyChanged("WelfareID");
					this.OnWelfareIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Title")]
	public partial class Title : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TitleID;
		
		private string _Description;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTitleIDChanging(string value);
    partial void OnTitleIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Title()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TitleID", DbType="VarChar(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TitleID
		{
			get
			{
				return this._TitleID;
			}
			set
			{
				if ((this._TitleID != value))
				{
					this.OnTitleIDChanging(value);
					this.SendPropertyChanging();
					this._TitleID = value;
					this.SendPropertyChanged("TitleID");
					this.OnTitleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tools")]
	public partial class Tool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _ToolCode;
		
		private string _StartTime;
		
		private string _EndTime;
		
		private string _Provider;
		
		private string _Result;
		
		private string _RecorderID;
		
		private System.Nullable<System.DateTime> _EvalDateTime;
		
		private EntityRef<Evaluation> _Evaluation;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnToolCodeChanging(string value);
    partial void OnToolCodeChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public Tool()
		{
			this._Evaluation = default(EntityRef<Evaluation>);
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					if (this._Evaluation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ToolCode
		{
			get
			{
				return this._ToolCode;
			}
			set
			{
				if ((this._ToolCode != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolCodeChanging(value);
					this.SendPropertyChanging();
					this._ToolCode = value;
					this.SendPropertyChanged("ToolCode");
					this.OnToolCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="VarChar(50)")]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="VarChar(50)")]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="VarChar(50)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Evaluation_Tool", Storage="_Evaluation", ThisKey="CID,CaseNo", OtherKey="CID,CaseNo", IsForeignKey=true)]
		public Evaluation Evaluation
		{
			get
			{
				return this._Evaluation.Entity;
			}
			set
			{
				Evaluation previousValue = this._Evaluation.Entity;
				if (((previousValue != value) 
							|| (this._Evaluation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Evaluation.Entity = null;
						previousValue.Tools.Remove(this);
					}
					this._Evaluation.Entity = value;
					if ((value != null))
					{
						value.Tools.Add(this);
						this._CID = value.CID;
						this._CaseNo = value.CaseNo;
					}
					else
					{
						this._CID = default(string);
						this._CaseNo = default(int);
					}
					this.SendPropertyChanged("Evaluation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_Tool", Storage="_Material", ThisKey="ToolCode", OtherKey="MaterialCode", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.Tools.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.Tools.Add(this);
						this._ToolCode = value.MaterialCode;
					}
					else
					{
						this._ToolCode = default(string);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tools_log")]
	public partial class Tools_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CID;
		
		private int _CaseNo;
		
		private string _ToolCode;
		
		private string _StartTime;
		
		private string _EndTime;
		
		private string _Provider;
		
		private string _Result;
		
		private string _RecorderID;
		
		private System.DateTime _EvalDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(string value);
    partial void OnCIDChanged();
    partial void OnCaseNoChanging(int value);
    partial void OnCaseNoChanged();
    partial void OnToolCodeChanging(string value);
    partial void OnToolCodeChanged();
    partial void OnStartTimeChanging(string value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(string value);
    partial void OnEndTimeChanged();
    partial void OnProviderChanging(string value);
    partial void OnProviderChanged();
    partial void OnResultChanging(string value);
    partial void OnResultChanged();
    partial void OnRecorderIDChanging(string value);
    partial void OnRecorderIDChanged();
    partial void OnEvalDateTimeChanging(System.DateTime value);
    partial void OnEvalDateTimeChanged();
    #endregion
		
		public Tools_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", DbType="VarChar(13) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseNo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CaseNo
		{
			get
			{
				return this._CaseNo;
			}
			set
			{
				if ((this._CaseNo != value))
				{
					this.OnCaseNoChanging(value);
					this.SendPropertyChanging();
					this._CaseNo = value;
					this.SendPropertyChanged("CaseNo");
					this.OnCaseNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToolCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ToolCode
		{
			get
			{
				return this._ToolCode;
			}
			set
			{
				if ((this._ToolCode != value))
				{
					this.OnToolCodeChanging(value);
					this.SendPropertyChanging();
					this._ToolCode = value;
					this.SendPropertyChanged("ToolCode");
					this.OnToolCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="VarChar(50)")]
		public string StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="VarChar(50)")]
		public string EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Provider", DbType="VarChar(50)")]
		public string Provider
		{
			get
			{
				return this._Provider;
			}
			set
			{
				if ((this._Provider != value))
				{
					this.OnProviderChanging(value);
					this.SendPropertyChanging();
					this._Provider = value;
					this.SendPropertyChanged("Provider");
					this.OnProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result", DbType="VarChar(50)")]
		public string Result
		{
			get
			{
				return this._Result;
			}
			set
			{
				if ((this._Result != value))
				{
					this.OnResultChanging(value);
					this.SendPropertyChanging();
					this._Result = value;
					this.SendPropertyChanged("Result");
					this.OnResultChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecorderID", DbType="VarChar(50)")]
		public string RecorderID
		{
			get
			{
				return this._RecorderID;
			}
			set
			{
				if ((this._RecorderID != value))
				{
					this.OnRecorderIDChanging(value);
					this.SendPropertyChanging();
					this._RecorderID = value;
					this.SendPropertyChanged("RecorderID");
					this.OnRecorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvalDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EvalDateTime
		{
			get
			{
				return this._EvalDateTime;
			}
			set
			{
				if ((this._EvalDateTime != value))
				{
					this.OnEvalDateTimeChanging(value);
					this.SendPropertyChanging();
					this._EvalDateTime = value;
					this.SendPropertyChanged("EvalDateTime");
					this.OnEvalDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tumbon")]
	public partial class Tumbon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _TumbonID;
		
		private string _TumbonDescription;
		
		private string _CityID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTumbonIDChanging(string value);
    partial void OnTumbonIDChanged();
    partial void OnTumbonDescriptionChanging(string value);
    partial void OnTumbonDescriptionChanged();
    partial void OnCityIDChanging(string value);
    partial void OnCityIDChanged();
    #endregion
		
		public Tumbon()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TumbonID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string TumbonID
		{
			get
			{
				return this._TumbonID;
			}
			set
			{
				if ((this._TumbonID != value))
				{
					this.OnTumbonIDChanging(value);
					this.SendPropertyChanging();
					this._TumbonID = value;
					this.SendPropertyChanged("TumbonID");
					this.OnTumbonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TumbonDescription", DbType="VarChar(MAX)")]
		public string TumbonDescription
		{
			get
			{
				return this._TumbonDescription;
			}
			set
			{
				if ((this._TumbonDescription != value))
				{
					this.OnTumbonDescriptionChanging(value);
					this.SendPropertyChanging();
					this._TumbonDescription = value;
					this.SendPropertyChanged("TumbonDescription");
					this.OnTumbonDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityID", DbType="VarChar(10)")]
		public string CityID
		{
			get
			{
				return this._CityID;
			}
			set
			{
				if ((this._CityID != value))
				{
					this.OnCityIDChanging(value);
					this.SendPropertyChanging();
					this._CityID = value;
					this.SendPropertyChanged("CityID");
					this.OnCityIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsedMaterials")]
	public partial class UsedMaterial : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ACTCode;
		
		private string _MaterialCode;
		
		private string _Quantity;
		
		private System.Nullable<System.DateTime> _logDateTime;
		
		private EntityRef<Material> _Material;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    partial void OnlogDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnlogDateTimeChanged();
    #endregion
		
		public UsedMaterial()
		{
			this._Material = default(EntityRef<Material>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="VarChar(50)")]
		public string Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> logDateTime
		{
			get
			{
				return this._logDateTime;
			}
			set
			{
				if ((this._logDateTime != value))
				{
					this.OnlogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._logDateTime = value;
					this.SendPropertyChanged("logDateTime");
					this.OnlogDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_UsedMaterial", Storage="_Material", ThisKey="MaterialCode", OtherKey="MaterialCode", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.UsedMaterials.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.UsedMaterials.Add(this);
						this._MaterialCode = value.MaterialCode;
					}
					else
					{
						this._MaterialCode = default(string);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsedMaterials_log")]
	public partial class UsedMaterials_log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ACTCode;
		
		private string _MaterialCode;
		
		private string _Quantity;
		
		private System.DateTime _logDateTime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnACTCodeChanging(string value);
    partial void OnACTCodeChanged();
    partial void OnMaterialCodeChanging(string value);
    partial void OnMaterialCodeChanged();
    partial void OnQuantityChanging(string value);
    partial void OnQuantityChanged();
    partial void OnlogDateTimeChanging(System.DateTime value);
    partial void OnlogDateTimeChanged();
    #endregion
		
		public UsedMaterials_log()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ACTCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ACTCode
		{
			get
			{
				return this._ACTCode;
			}
			set
			{
				if ((this._ACTCode != value))
				{
					this.OnACTCodeChanging(value);
					this.SendPropertyChanging();
					this._ACTCode = value;
					this.SendPropertyChanged("ACTCode");
					this.OnACTCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialCode", DbType="VarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MaterialCode
		{
			get
			{
				return this._MaterialCode;
			}
			set
			{
				if ((this._MaterialCode != value))
				{
					this.OnMaterialCodeChanging(value);
					this.SendPropertyChanging();
					this._MaterialCode = value;
					this.SendPropertyChanged("MaterialCode");
					this.OnMaterialCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="VarChar(255)")]
		public string Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_logDateTime", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime logDateTime
		{
			get
			{
				return this._logDateTime;
			}
			set
			{
				if ((this._logDateTime != value))
				{
					this.OnlogDateTimeChanging(value);
					this.SendPropertyChanging();
					this._logDateTime = value;
					this.SendPropertyChanged("logDateTime");
					this.OnlogDateTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
